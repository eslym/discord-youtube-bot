{"version":3,"sources":["../src/bot.ts"],"names":[],"mappings":"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","file":"bot.js","sourcesContent":["import {\n    ApplicationCommand,\n    ApplicationCommandPermissionData,\n    Client,\n    Collection,\n    Guild,\n    GuildResolvable,\n    Intents,\n    Snowflake\n} from \"discord.js\";\nimport {REST} from \"@discordjs/rest\";\nimport {Routes} from \"discord-api-types/v9\";\nimport {get as config} from \"./config\";\nimport {logger} from \"./logger\";\nimport {Notification} from \"./models/Notification\";\nimport {Op} from \"sequelize\";\nimport {YoutubeVideo} from \"./models/YoutubeVideo\";\nimport {google, youtube_v3} from \"googleapis\";\nimport {CommandManager} from \"./commands/CommandManager\";\nimport {YoutubeCommand} from \"./commands/YoutubeCommand\";\nimport cron = require('node-cron');\nimport Schema$VideoSnippet = youtube_v3.Schema$VideoSnippet;\nimport Dict = NodeJS.Dict;\nimport Schema$Video = youtube_v3.Schema$Video;\nimport moment = require(\"moment\");\n\nlet intents = new Intents();\n\nintents.add(\n    Intents.FLAGS.GUILDS,\n    Intents.FLAGS.GUILD_MEMBERS,\n    Intents.FLAGS.GUILD_INTEGRATIONS,\n    Intents.FLAGS.GUILD_MESSAGES,\n    Intents.FLAGS.DIRECT_MESSAGES,\n)\n\nexport const bot = new Client({intents});\n\nlet client = new REST({version: '9'});\nclient.setToken(config('discord.token'));\n\nCommandManager.addCommand(YoutubeCommand);\n\nexport async function setupCommands() {\n    const appId = config('discord.appId')\n    let route = Routes.applicationCommands(appId);\n    await client.put(route, {\n        body: CommandManager.getDefinitions()\n    });\n}\n\nasync function setGuildCommandPermissions(guild: Guild, cmds: Collection<Snowflake, ApplicationCommand<{ guild: GuildResolvable }>>) {\n    if (!guild.commands) return;\n    for (let command of cmds.values()) {\n        let permissions: ApplicationCommandPermissionData[] = [\n            {\n                id: guild.ownerId,\n                type: 'USER',\n                permission: true,\n            }\n        ];\n        await command.permissions.add({\n            guild, permissions\n        }).catch(_ => logger.warn(`Failed to set permissions for /${command.name} on ${guild.name}`));\n    }\n}\n\nasync function liveCheck(){\n    let videos = await YoutubeVideo.findAll({\n        include: [Notification],\n        where: {\n            live_at: {[Op.not]: null},\n            deleted_at: null,\n            '$notifications.notified_at$': null,\n        }\n    });\n    if(videos.length === 0) return;\n    let res = await google.youtube('v3').videos.list({\n        part: ['liveStreamingDetails', 'snippet', 'id'],\n        id: videos.map(v=>v.video_id),\n        maxResults: videos.length,\n    });\n    let map: Dict<Schema$Video> = {};\n    res.data.items.forEach(v => {\n        map[v.id] = v;\n    });\n    for (let video of videos){\n        let details = map[video.video_id].liveStreamingDetails;\n        if(details.actualStartTime){\n            await Notification.update({\n                notified_at: new Date(),\n            },{\n                where: {\n                    video_id: video.video_id,\n                    notified_at: null,\n                }\n            });\n            continue;\n        }\n        if(!details.scheduledStartTime){\n            await Notification.destroy({\n                where: {\n                    video_id: video.video_id,\n                    notified_at: null,\n                }\n            });\n            video.live_at = null;\n            video.save();\n            continue;\n        }\n        let live = moment(details.scheduledStartTime);\n        if(!moment(video.live_at).isSame(live)) {\n            video.live_at = live.toDate();\n            video.save();\n            let notifications = await Notification.findAll({\n                where: {\n                    video_id: video.video_id,\n                    notified_at: null,\n                }\n            });\n            let url = new URL('https://www.youtube.com/watch');\n            url.searchParams.set('v', video.video_id);\n            let schedule = live.subtract({minute: 5}).startOf('minute').toDate();\n            for (let notification of notifications) {\n                notification.scheduled_at = schedule;\n                notification.notified_at = null;\n                await notification.save();\n                let sub = await notification.$get('subscription');\n                await sub.notifyReschedule(url.toString(), map[video.video_id].snippet.channelTitle, video.live_at);\n            }\n        }\n    }\n}\n\nasync function pushLiveNotifications(){\n    let notifications = await Notification.findAll({\n        where: {\n            notified_at: null,\n            scheduled_at: {\n                [Op.lte]: new Date()\n            }\n        }\n    });\n    if(notifications.length === 0){\n        return;\n    }\n    let videos = await YoutubeVideo.findAll({\n        attributes: ['video_id'],\n        where: {\n            video_id: {\n                [Op.in]: notifications.map(n => n.video_id)\n            }\n        }\n    });\n    if(videos.length === 0) return;\n    let res = await google.youtube('v3').videos.list({\n        part: ['snippet', 'id'],\n        id: videos.map(v=>v.video_id),\n        maxResults: videos.length,\n    });\n    let videoData: Dict<Schema$VideoSnippet> = {};\n    for (let item of res.data.items){\n        videoData[item.id] = item.snippet;\n    }\n    for (let notification of notifications) {\n        let snippet = videoData[notification.video_id];\n        let url = new URL('https://www.youtube.com/watch');\n        url.searchParams.set('v', notification.video_id);\n        let sub = await notification.$get('subscription');\n        await sub.notifyStarting(url.toString(), snippet.channelTitle);\n        notification.notified_at = new Date();\n        notification.save();\n    }\n}\n\nbot.on('ready', () => {\n    (async () => {\n        let guilds = await bot.guilds.fetch();\n        let cmds = await bot.application.commands.fetch();\n        for (let g of guilds.values()) {\n            let guild = await g.fetch();\n            await setGuildCommandPermissions(guild, cmds);\n        }\n        bot.on('guildCreate', (guild) => {\n            (async () => {\n                guild = await guild.fetch();\n                await setGuildCommandPermissions(guild, cmds);\n            })().catch((error) => {\n                logger.error(error);\n            });\n        });\n    })().catch(logger.error);\n    cron.schedule('* * * * *', ()=>{\n        liveCheck()\n            .catch(logger.error)\n            .finally(\n                ()=>pushLiveNotifications().catch(logger.error)\n            );\n    });\n});\n\nbot.on('interactionCreate', (interaction) => {\n    if (interaction.isCommand()) {\n        CommandManager.handle(interaction).catch(logger.error);\n    }\n});\n"]}
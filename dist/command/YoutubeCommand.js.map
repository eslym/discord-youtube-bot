{"version":3,"sources":["../src/command/YoutubeCommand.ts"],"names":[],"mappings":"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","file":"YoutubeCommand.js","sourcesContent":["import {Command} from \"../manager/CommandManager\";\r\nimport {\r\n    ButtonInteraction,\r\n    CommandInteraction,\r\n    Interaction,\r\n    MessageActionRow,\r\n    MessageButton,\r\n    MessageEmbed,\r\n    MessageSelectMenu,\r\n    MessageSelectOptionData,\r\n    SelectMenuInteraction,\r\n    TextChannel\r\n} from \"discord.js\";\r\nimport {ApplicationCommandTypes} from \"discord.js/typings/enums\";\r\nimport {embed} from \"../utils/embed\";\r\nimport {google, youtube_v3} from \"googleapis\";\r\nimport {logger} from \"../logger\";\r\nimport {ChannelSubscriptionManager, SubscriptionManager} from \"../manager/SubscriptionManager\";\r\nimport {catchLog} from \"../utils/catchLog\";\r\nimport {checkbox} from \"../utils/checkbox\";\r\nimport {WebSub} from \"../models/WebSub\";\r\nimport Dict = NodeJS.Dict;\r\nimport Schema$SearchResultSnippet = youtube_v3.Schema$SearchResultSnippet;\r\nimport Schema$SearchListResponse = youtube_v3.Schema$SearchListResponse;\r\nimport Schema$Channel = youtube_v3.Schema$Channel;\r\nimport Schema$ChannelListResponse = youtube_v3.Schema$ChannelListResponse;\r\n\r\nfunction limit(str: string, length: number) {\r\n    if (str.length <= length) {\r\n        return str;\r\n    }\r\n    return str.slice(0, length - 3) + '...';\r\n}\r\n\r\nfunction buildSearchResult(res: Schema$SearchListResponse | Schema$ChannelListResponse): MessageActionRow[] {\r\n    let select = new MessageSelectMenu()\r\n        .setCustomId('youtube-search-result')\r\n        .setOptions(res.items.map(i => ({\r\n            label: i.snippet.title,\r\n            description: limit(i.snippet.description, 100),\r\n            value: typeof i.id === \"string\" ? i.id : i.id.channelId,\r\n        } as MessageSelectOptionData)))\r\n        .setPlaceholder('Select a channel to view details.');\r\n    let prev = new MessageButton()\r\n        .setStyle('SECONDARY')\r\n        .setCustomId('youtube-search-prev')\r\n        .setLabel('Previous Page')\r\n        .setDisabled(!res.prevPageToken);\r\n    let next = new MessageButton()\r\n        .setStyle('SECONDARY')\r\n        .setCustomId('youtube-search-next')\r\n        .setLabel('Next Page')\r\n        .setDisabled(!res.nextPageToken);\r\n    return [\r\n        new MessageActionRow({components: [select]}),\r\n        new MessageActionRow({components: [prev, next]}),\r\n    ];\r\n}\r\n\r\nasync function makeChannelActions(manager: ChannelSubscriptionManager, channelId: string) {\r\n    let state = await manager.hasSubscription(channelId);\r\n    let btnSub = new MessageButton()\r\n        .setLabel(state ? 'Unsubscribe' : 'Subscribe')\r\n        .setStyle(state ? \"SECONDARY\" : \"DANGER\")\r\n        .setEmoji(state ? '❌' : '➕')\r\n        .setCustomId('youtube-subscribe');\r\n    let rows = [\r\n        new MessageActionRow()\r\n            .addComponents(btnSub)\r\n    ];\r\n    if (state) {\r\n        let sub = await manager.getSubscription(channelId);\r\n        let toggles = new MessageActionRow()\r\n            .addComponents(\r\n                new MessageButton()\r\n                    .setEmoji('📢')\r\n                    .setStyle('PRIMARY')\r\n                    .setLabel('Notifications:')\r\n                    .setDisabled(true)\r\n                    .setCustomId('---')\r\n            )\r\n            .addComponents(checkbox('New video publish', sub.notify_video).setCustomId('youtube-notify-video'))\r\n            .addComponents(checkbox('Live streaming scheduled', sub.notify_live).setCustomId('youtube-notify-live'))\r\n            .addComponents(checkbox('Live streaming re-scheduled', sub.notify_reschedule).setCustomId('youtube-notify-reschedule'))\r\n            .addComponents(checkbox('Live streaming starting soon', sub.notify_starting).setCustomId('youtube-notify-starting'));\r\n        rows.push(toggles);\r\n        let ch = manager.getChannel() as TextChannel;\r\n        let roles = await ch.guild.roles.fetch();\r\n        let mentions = new MessageSelectMenu()\r\n            .setCustomId('youtube-mentions')\r\n            .setPlaceholder('No mentions for notification.')\r\n            .setOptions(roles.map(r => ({\r\n                label: r.name,\r\n                description: r.id,\r\n                value: r.toString(),\r\n                default: sub.mention && sub.mention.includes(r.toString()),\r\n            } as MessageSelectOptionData)))\r\n            .setMinValues(0)\r\n            .setMaxValues(Math.min(25, roles.size));\r\n        rows.push(\r\n            new MessageActionRow()\r\n                .addComponents(mentions)\r\n        );\r\n    }\r\n    return rows;\r\n}\r\n\r\nasync function handleChannelAction(\r\n    interaction: ButtonInteraction | SelectMenuInteraction | CommandInteraction,\r\n    manager: ChannelSubscriptionManager,\r\n    message_id: string,\r\n    youtube_channel: string,\r\n    embeds: MessageEmbed[]\r\n) {\r\n    let msg = await interaction.channel.messages.fetch(message_id);\r\n    let buttonHandler = msg.createMessageComponentCollector({time: 60000});\r\n    buttonHandler.on('collect', catchLog(async (i: SelectMenuInteraction | ButtonInteraction) => {\r\n        if (i.isSelectMenu()) {\r\n            let sub = await manager.getSubscription(youtube_channel);\r\n            sub.mention = i.values;\r\n            await sub.save();\r\n        } else if (i.customId.startsWith('youtube-notify-')) {\r\n            let type = i.customId.slice(15);\r\n            let sub = await manager.getSubscription(youtube_channel);\r\n            sub[`notify_${type}`] = !sub[`notify_${type}`];\r\n            await sub.save();\r\n        } else {\r\n            if (await manager.hasSubscription(youtube_channel)) {\r\n                await manager.unsubscribe(youtube_channel);\r\n            } else {\r\n                await manager.subscribe(youtube_channel);\r\n            }\r\n        }\r\n        await i.update({\r\n            embeds,\r\n            components: await makeChannelActions(manager, youtube_channel),\r\n        });\r\n    }));\r\n    buttonHandler.on('end', () => {\r\n        interaction.editReply({\r\n            embeds,\r\n            components: []\r\n        }).catch(logger.error);\r\n    });\r\n}\r\n\r\nasync function sendDetailPage(interaction: SelectMenuInteraction, snippet: Schema$SearchResultSnippet) {\r\n    let manager = await SubscriptionManager.get(interaction.channelId);\r\n    let info = new MessageEmbed()\r\n        .setTitle(snippet.channelTitle)\r\n        .setDescription(snippet.description)\r\n        .setURL(`https://youtube.com/channel/${snippet.channelId}`)\r\n        .setThumbnail(snippet.thumbnails.medium.url)\r\n        .setFooter(snippet.channelId);\r\n    let reply = await interaction.reply({\r\n        embeds: [info],\r\n        components: await makeChannelActions(manager, snippet.channelId),\r\n        ephemeral: true,\r\n        fetchReply: true,\r\n    });\r\n    await handleChannelAction(interaction, manager, reply.id, snippet.channelId, [info]);\r\n}\r\n\r\nconst handlers: Dict<(interaction: CommandInteraction) => Promise<unknown>> = {\r\n    async search(interaction: CommandInteraction) {\r\n        let keyword = interaction.options.getString('keyword', true);\r\n        await interaction.reply({\r\n            embeds: [embed.info(`Searching for \"${keyword}\"`)],\r\n            ephemeral: true,\r\n        });\r\n        let res = await google.youtube('v3').search.list({\r\n            q: keyword, type: ['channel'], part: ['snippet', 'id'], maxResults: 10\r\n        });\r\n        if (res.data.pageInfo.totalResults === 0) {\r\n            await interaction.editReply({\r\n                embeds: [embed.warn(`No search results for \"${keyword}\"`)]\r\n            });\r\n            return;\r\n        }\r\n        let dict: Dict<Schema$SearchResultSnippet> = Object\r\n            .fromEntries(res.data.items.map(d => [d.id.channelId, d.snippet]));\r\n        let message = embed.info(`Search results for ${keyword}`)\r\n            .setFooter(`${res.data.pageInfo.totalResults} Results`);\r\n        let reply = await interaction.editReply({\r\n            embeds: [message],\r\n            components: buildSearchResult(res.data)\r\n        });\r\n        let msg = await interaction.channel.messages.fetch(reply.id);\r\n        let menuHandler = msg.createMessageComponentCollector({time: 300000});\r\n        menuHandler.on('collect', catchLog(async (i: Interaction) => {\r\n            if (i.isSelectMenu()) {\r\n                let selected = dict[i.values[0]];\r\n                await sendDetailPage(i, selected);\r\n                await interaction.editReply({\r\n                    embeds: [message],\r\n                    components: buildSearchResult(res.data)\r\n                });\r\n            } else if (i.isButton()) {\r\n                let pageToken = i.customId === 'youtube-search-prev' ?\r\n                    res.data.prevPageToken : res.data.nextPageToken;\r\n                res = await google.youtube('v3').search.list({\r\n                    q: keyword, type: ['channel'], part: ['snippet', 'id'], maxResults: 10, pageToken\r\n                });\r\n                dict = Object.fromEntries(res.data.items.map(d => [d.id.channelId, d.snippet]));\r\n                await i.update({\r\n                    embeds: [message],\r\n                    components: buildSearchResult(res.data)\r\n                });\r\n            }\r\n        }));\r\n        menuHandler.on('end', () => {\r\n            interaction.editReply({\r\n                embeds: [embed.warn('List expired.')],\r\n                components: []\r\n            }).catch(logger.error);\r\n        });\r\n    },\r\n    async inspect(interaction: CommandInteraction) {\r\n        await interaction.deferReply({ephemeral: true});\r\n        let id = interaction.options.getString('channel_id');\r\n        let websub = new WebSub({youtube_channel_id: id});\r\n        let res: Schema$Channel = await websub.fetchYoutubeChannelMeta();\r\n        if (res === null) {\r\n            await interaction.reply({\r\n                embeds: [embed.warn(`Channel \"${id}\" not found.`)]\r\n            });\r\n            return;\r\n        }\r\n        let manager = await SubscriptionManager.get(interaction.channelId);\r\n        let info = new MessageEmbed()\r\n            .setTitle(res.snippet.title)\r\n            .setDescription(res.snippet.description)\r\n            .setURL(`https://youtube.com/channel/${res.id}`)\r\n            .setThumbnail(res.snippet.thumbnails.medium.url)\r\n            .setFooter(res.id)\r\n            .addField('Subscribers', res.statistics.subscriberCount, true)\r\n            .addField('Views', res.statistics.viewCount, true);\r\n        let reply = await interaction.editReply({\r\n            embeds: [info],\r\n            components: await makeChannelActions(manager, res.id),\r\n        });\r\n        await handleChannelAction(interaction, manager, reply.id, res.id, [info]);\r\n    },\r\n    async list(interaction: CommandInteraction) {\r\n        let manager = await SubscriptionManager.get(interaction.channelId);\r\n        let subs = await Promise.all((await manager.listSubscription())\r\n            .map(s => s.$get('websub')));\r\n        if (subs.length === 0) {\r\n            await interaction.reply({\r\n                embeds: [embed.warn(`No subscriptions for ${interaction.channel}`)],\r\n                ephemeral: true,\r\n            })\r\n            return;\r\n        }\r\n        let res = await google.youtube('v3').channels.list({\r\n            id: subs.map(s => s.youtube_channel_id),\r\n            part: ['snippet', 'statistics'],\r\n            maxResults: 10,\r\n        });\r\n        let dict: Dict<Schema$Channel> = Object\r\n            .fromEntries(res.data.items.map(d => [d.id, d]));\r\n        let message = embed.info(`Subscriptions for ${interaction.channel}`)\r\n            .setFooter(`Total: ${subs.length}`);\r\n        let reply = await interaction.reply({\r\n            embeds: [message],\r\n            components: buildSearchResult(res.data),\r\n            ephemeral: true,\r\n            fetchReply: true\r\n        });\r\n        let msg = await interaction.channel.messages.fetch(reply.id);\r\n        let menuHandler = msg.createMessageComponentCollector({time: 300000});\r\n        menuHandler.on('collect', catchLog(async (i: Interaction) => {\r\n            if (i.isSelectMenu()) {\r\n                let selected = dict[i.values[0]];\r\n                let info = new MessageEmbed()\r\n                    .setTitle(selected.snippet.title)\r\n                    .setDescription(selected.snippet.description)\r\n                    .setURL(`https://youtube.com/channel/${selected.id}`)\r\n                    .setThumbnail(selected.snippet.thumbnails.medium.url)\r\n                    .setFooter(selected.id)\r\n                    .addField('Subscribers', selected.statistics.subscriberCount, true)\r\n                    .addField('Views', selected.statistics.viewCount, true);\r\n                let reply = await i.reply({\r\n                    embeds: [info],\r\n                    components: await makeChannelActions(manager, selected.id),\r\n                    fetchReply: true,\r\n                    ephemeral: true,\r\n                });\r\n                await handleChannelAction(i, manager, reply.id, selected.id, [info]);\r\n                await interaction.editReply({\r\n                    embeds: [message],\r\n                    components: buildSearchResult(res.data)\r\n                });\r\n            } else if (i.isButton()) {\r\n                let pageToken = i.customId === 'youtube-search-prev' ?\r\n                    res.data.prevPageToken : res.data.nextPageToken;\r\n                res = await google.youtube('v3').channels.list({\r\n                    id: subs.map(s => s.youtube_channel_id),\r\n                    part: ['snippet', 'statistics'],\r\n                    maxResults: 10, pageToken\r\n                });\r\n                dict = Object.fromEntries(res.data.items.map(d => [d.id, d]));\r\n                await i.update({\r\n                    embeds: [message],\r\n                    components: buildSearchResult(res.data)\r\n                });\r\n            }\r\n        }));\r\n        menuHandler.on('end', () => {\r\n            interaction.editReply({\r\n                embeds: [embed.warn('Search expired.')],\r\n                components: []\r\n            }).catch(logger.error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const YoutubeCommand: Command = {\r\n    id: '5c68e897-1737-4fbd-97e0-5e383b54246b',\r\n    definition: {\r\n        type: ApplicationCommandTypes.CHAT_INPUT,\r\n        name: 'youtube',\r\n        description: 'Operate youtube subscriptions on channel',\r\n        defaultPermission: false,\r\n        options: [\r\n            {\r\n                name: 'search',\r\n                type: \"SUB_COMMAND\",\r\n                description: 'Search a channel on youtube.',\r\n                options: [\r\n                    {\r\n                        type: \"STRING\",\r\n                        name: 'keyword',\r\n                        description: 'Keyword for searching.',\r\n                        required: true,\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'inspect',\r\n                type: \"SUB_COMMAND\",\r\n                description: 'Inspect a youtube channel state',\r\n                options: [\r\n                    {\r\n                        name: 'channel_id',\r\n                        type: \"STRING\",\r\n                        description: 'Youtube channel id to subscribe.',\r\n                        required: true,\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'list',\r\n                type: \"SUB_COMMAND\",\r\n                description: 'List the current subscriptions on this channel',\r\n            },\r\n        ]\r\n    },\r\n    async handle(interaction: CommandInteraction) {\r\n        let sub = interaction.options.getSubcommand(true);\r\n        await handlers[sub](interaction);\r\n    }\r\n}"]}
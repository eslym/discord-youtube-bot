{"version":3,"sources":["../src/models/Subscription.ts"],"names":[],"mappings":"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","file":"Subscription.js","sourcesContent":["import {SnowflakeUtil, TextChannel} from \"discord.js\";\nimport {BeforeValidate, Column, HasMany, Model, Table} from \"sequelize-typescript\";\nimport {DataTypes} from \"sequelize\";\nimport {Notification} from \"./Notification\";\nimport {WebSub} from \"./WebSub\";\nimport {bot} from \"../bot\";\nimport moment = require(\"moment\");\n\n@Table({tableName: 'subscriptions', createdAt: 'created_at', updatedAt: 'updated_at'})\nexport class Subscription extends Model<Subscription>{\n\n    @BeforeValidate\n    protected static makeId(self: WebSub) {\n        if (!self.id) {\n            self.id = SnowflakeUtil.generate() as any;\n        }\n    }\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, primaryKey: true})\n    public id: number;\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false, unique: 'websub_notification_on_channel'})\n    public discord_channel_id: number;\n    \n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false, unique: 'websub_notification_on_channel'})\n    public sub_id: number;\n\n    @Column({type: DataTypes.STRING, allowNull: true})\n    public mention: string;\n\n    @HasMany(()=>Notification, 'subscription_id')\n    public notifications: Notification[];\n\n    public async notifyPublish(video_url: string, channel_title: string, live?: Date){\n        let channel = await bot.channels.fetch(this.discord_channel_id.toString()) as TextChannel;\n        let notification = `${channel_title} has publish a new video.\\n${video_url}`;\n        if(live){\n            let schedule = moment(live).format(\"D MMM YYYY, HH:MM\");\n            notification = `${channel_title} scheduled a live streaming at ${schedule}\\n${video_url}`;\n        }\n        if(this.mention) {\n            notification = this.mention + notification;\n        }\n        await channel.send(notification);\n    }\n\n    public async notifyReschedule(video_url: string, channel_title: string, live: Date){\n        let channel = await bot.channels.fetch(this.discord_channel_id.toString()) as TextChannel;\n        let schedule = moment(live).format(\"D MMM YYYY, HH:MM\");\n        let notification = `${channel_title} re-scheduled a live streaming to ${schedule}\\n${video_url}`;\n        if(this.mention) {\n            notification = this.mention + notification;\n        }\n        await channel.send(notification);\n    }\n\n    public async notifyStarting(video_url: string, channel_title: string){\n        let channel = await bot.channels.fetch(this.discord_channel_id.toString()) as TextChannel;\n        let notification = `${channel_title} is gonna to start a live streaming.\\n${video_url}`;\n        if(this.mention) {\n            notification = this.mention + notification;\n        }\n        await channel.send(notification);\n    }\n\n\n}"]}
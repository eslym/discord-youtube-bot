{"version":3,"sources":["../src/models/Subscription.ts"],"names":[],"mappings":"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","file":"Subscription.js","sourcesContent":["import {SnowflakeUtil, TextBasedChannels} from \"discord.js\";\r\nimport {BeforeValidate, BelongsTo, Column, Model, Table} from \"sequelize-typescript\";\r\nimport {DataTypes} from \"sequelize\";\r\nimport {WebSub} from \"./WebSub\";\r\nimport {NotificationType, SubscriptionManager} from \"../manager/SubscriptionManager\";\r\nimport {YoutubeVideo} from \"./YoutubeVideo\";\r\n\r\n@Table({\r\n    tableName: 'subscriptions',\r\n    createdAt: 'created_at',\r\n    updatedAt: 'updated_at',\r\n    indexes: [{\r\n        name: 'websub_notification_on_channel',\r\n        unique: true,\r\n        fields: ['discord_channel_id', 'websub_id']\r\n    }\r\n    ]\r\n})\r\nexport class Subscription extends Model<Subscription> {\r\n\r\n    @BeforeValidate\r\n    protected static makeId(self: WebSub) {\r\n        if (!self.id) {\r\n            self.id = SnowflakeUtil.generate() as any;\r\n        }\r\n    }\r\n\r\n    @Column({type: DataTypes.BIGINT.UNSIGNED, primaryKey: true})\r\n    public id: number;\r\n\r\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: true})\r\n    public discord_guild_id: number;\r\n\r\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false})\r\n    public discord_channel_id: number;\r\n\r\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false})\r\n    public websub_id: number;\r\n\r\n    @Column({type: DataTypes.JSON, allowNull: true})\r\n    public mention: string[];\r\n\r\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\r\n    public notify_video;\r\n\r\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\r\n    public notify_live;\r\n\r\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\r\n    public notify_reschedule;\r\n\r\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\r\n    public notify_starting;\r\n\r\n    @BelongsTo(() => WebSub, 'websub_id')\r\n    public websub: WebSub;\r\n\r\n    public notify(type: NotificationType, video: YoutubeVideo): Promise<boolean> {\r\n        return SubscriptionManager.get(this.discord_channel_id.toString())\r\n            .then(m => m.notify(type, this, video));\r\n    }\r\n\r\n    public static async tryFind(channel_id: string, channel: TextBasedChannels) {\r\n        let websub = await WebSub.findOne({\r\n            where: {\r\n                youtube_channel: channel_id,\r\n            }\r\n        });\r\n        if (!websub) {\r\n            websub = new WebSub({\r\n                youtube_channel: channel_id,\r\n            });\r\n        }\r\n        let subscription = await Subscription.findOne({\r\n            where: {\r\n                sub_id: websub.id,\r\n                discord_channel_id: channel.id,\r\n            }\r\n        });\r\n        return {websub, subscription};\r\n    }\r\n}\r\n"]}
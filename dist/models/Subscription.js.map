{"version":3,"sources":["../src/models/Subscription.ts"],"names":[],"mappings":"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","file":"Subscription.js","sourcesContent":["import {SnowflakeUtil, TextBasedChannel} from \"discord.js\";\nimport {BeforeValidate, BelongsTo, Column, Model, Table} from \"sequelize-typescript\";\nimport {DataTypes} from \"sequelize\";\nimport {WebSub} from \"./WebSub\";\nimport {NotificationType, SubscriptionManager} from \"../manager/SubscriptionManager\";\nimport {YoutubeVideo} from \"./YoutubeVideo\";\n\n@Table({\n    tableName: 'subscriptions',\n    createdAt: 'created_at',\n    updatedAt: 'updated_at',\n    indexes: [{\n        name: 'websub_notification_on_channel',\n        unique: true,\n        fields: ['discord_channel_id', 'websub_id']\n    }\n    ]\n})\nexport class Subscription extends Model<Subscription> {\n\n    @BeforeValidate\n    protected static makeId(self: WebSub) {\n        if (!self.id) {\n            self.id = SnowflakeUtil.generate() as any;\n        }\n    }\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, primaryKey: true})\n    public id: number;\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: true})\n    public discord_guild_id: number;\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false})\n    public discord_channel_id: number;\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false})\n    public websub_id: number;\n\n    @Column({type: DataTypes.JSON, allowNull: true})\n    public mention: string[];\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_video;\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_live;\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_reschedule;\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_starting;\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_started;\n\n    @BelongsTo(() => WebSub, 'websub_id')\n    public websub: WebSub;\n\n    public notify(type: NotificationType, video: YoutubeVideo): Promise<boolean> {\n        return SubscriptionManager.get(this.discord_channel_id.toString())\n            .then(m => m.notify(type, this, video));\n    }\n\n    public static async tryFind(channel_id: string, channel: TextBasedChannel) {\n        let websub = await WebSub.findOne({\n            where: {\n                youtube_channel: channel_id,\n            }\n        });\n        if (!websub) {\n            websub = new WebSub({\n                youtube_channel: channel_id,\n            });\n        }\n        let subscription = await Subscription.findOne({\n            where: {\n                sub_id: websub.id,\n                discord_channel_id: channel.id,\n            }\n        });\n        return {websub, subscription};\n    }\n}\n"]}
{"version":3,"sources":["../src/models/Subscription.ts"],"names":[],"mappings":"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","file":"Subscription.js","sourcesContent":["import {SnowflakeUtil, TextBasedChannels} from \"discord.js\";\nimport {BeforeValidate, BelongsTo, Column, Model, Table} from \"sequelize-typescript\";\nimport {DataTypes} from \"sequelize\";\nimport {WebSub} from \"./WebSub\";\nimport {NotificationType, SubscriptionManager} from \"../manager/SubscriptionManager\";\nimport {YoutubeVideo} from \"./YoutubeVideo\";\n\n@Table({tableName: 'subscriptions', createdAt: 'created_at', updatedAt: 'updated_at'})\nexport class Subscription extends Model<Subscription> {\n\n    @BeforeValidate\n    protected static makeId(self: WebSub) {\n        if (!self.id) {\n            self.id = SnowflakeUtil.generate() as any;\n        }\n    }\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, primaryKey: true})\n    public id: number;\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: true})\n    public discord_guild_id: number;\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false, unique: 'websub_notification_on_channel'})\n    public discord_channel_id: number;\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false, unique: 'websub_notification_on_channel'})\n    public websub_id: number;\n\n    @Column({type: DataTypes.STRING, allowNull: true})\n    public mention: string;\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_video;\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_live;\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_reschedule;\n\n    @Column({type: DataTypes.BOOLEAN, defaultValue: true})\n    public notify_starting;\n\n    @BelongsTo(() => WebSub, 'websub_id')\n    public websub: WebSub;\n\n    public notify(type: NotificationType, video: YoutubeVideo): Promise<boolean> {\n        return SubscriptionManager.get(this.discord_channel_id.toString())\n            .then(m => m.notify(type, this, video));\n    }\n\n    public static async tryFind(channel_id: string, channel: TextBasedChannels) {\n        let websub = await WebSub.findOne({\n            where: {\n                youtube_channel: channel_id,\n            }\n        });\n        if (!websub) {\n            websub = new WebSub({\n                youtube_channel: channel_id,\n            });\n        }\n        let subscription = await Subscription.findOne({\n            where: {\n                sub_id: websub.id,\n                discord_channel_id: channel.id,\n            }\n        });\n        return {websub, subscription};\n    }\n}\n"]}
{"version":3,"sources":["../src/models/WebSub.ts"],"names":[],"mappings":"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","file":"WebSub.js","sourcesContent":["import {BeforeValidate, Column, HasMany, Model, Table} from \"sequelize-typescript\";\r\nimport {DataTypes} from \"sequelize\";\r\nimport {SnowflakeUtil} from \"discord.js\";\r\nimport {YoutubeVideo} from \"./YoutubeVideo\";\r\nimport {Subscription} from \"./Subscription\";\r\nimport axios from \"axios\";\r\nimport {get as config} from \"../config\";\r\nimport {google, youtube_v3} from \"googleapis\";\r\nimport {logger} from \"../logger\";\r\nimport {redis} from \"../redis\";\r\nimport crypto = require(\"crypto\");\r\nimport Schema$Channel = youtube_v3.Schema$Channel;\r\n\r\n@Table({tableName: 'web_subs', createdAt: 'created_at', updatedAt: 'updated_at', collate: 'utf8_bin'})\r\nexport class WebSub extends Model<WebSub> {\r\n\r\n    @BeforeValidate\r\n    protected static makeId(self: WebSub) {\r\n        if (!self.id) {\r\n            self.id = SnowflakeUtil.generate() as any;\r\n        }\r\n        if (!self.secret) {\r\n            self.secret = crypto.randomBytes(20).toString('base64');\r\n        }\r\n    }\r\n\r\n    @Column({type: DataTypes.BIGINT.UNSIGNED, primaryKey: true})\r\n    public id: number;\r\n\r\n    @Column({type: DataTypes.STRING, allowNull: false})\r\n    public youtube_channel_id: string;\r\n\r\n    @Column({type: DataTypes.STRING, allowNull: false})\r\n    public secret: string;\r\n\r\n    @Column({type: DataTypes.DATE, allowNull: true})\r\n    public created_at: Date;\r\n\r\n    @Column({type: DataTypes.DATE, allowNull: true})\r\n    public updated_at: Date;\r\n\r\n    @Column({type: DataTypes.DATE, allowNull: true})\r\n    public expires_at: Date;\r\n\r\n    @HasMany(() => YoutubeVideo, {foreignKey: 'websub_id'})\r\n    public videos: YoutubeVideo[];\r\n\r\n    @HasMany(() => Subscription, {foreignKey: 'websub_id'})\r\n    public subscriptions: Subscription[];\r\n\r\n    public get topic_url(): string {\r\n        let url = new URL('https://www.youtube.com/xml/feeds/videos.xml');\r\n        let params = new URLSearchParams([['channel_id', this.youtube_channel_id]]);\r\n        url.search = params.toString();\r\n        return url.toString();\r\n    }\r\n\r\n    public async fetchYoutubeChannelMeta(): Promise<Schema$Channel> {\r\n        let cache = await redis.get(`ytChannel:${this.youtube_channel_id}`);\r\n        if (cache) {\r\n            return JSON.parse(cache);\r\n        }\r\n        let res = await google.youtube('v3').channels.list({\r\n            id: [this.youtube_channel_id],\r\n            part: ['snippet', 'statistics'],\r\n        });\r\n        if (res.data.pageInfo.totalResults === 0) {\r\n            return null;\r\n        }\r\n        await redis.set(\r\n            `ytChannel:${this.youtube_channel_id}`,\r\n            JSON.stringify(res.data.items[0]),\r\n            {\r\n                EX: 5\r\n            }\r\n        );\r\n        return res.data.items[0];\r\n    }\r\n\r\n    public async subscribe(mode: 'subscribe' | 'unsubscribe' = 'subscribe') {\r\n        let data = new URLSearchParams();\r\n        data.append('hub.callback', `${config('websub.url')}/websub/${this.id}`);\r\n        data.append('hub.mode', mode);\r\n        data.append('hub.topic', this.topic_url);\r\n        data.append('hub.secret', this.secret);\r\n        await axios.post('https://pubsubhubbub.appspot.com/subscribe', data)\r\n            .catch((_) => {\r\n                logger.warn(`[WebSub] Failed to ${mode} ` + this.topic_url);\r\n            });\r\n    }\r\n}"]}
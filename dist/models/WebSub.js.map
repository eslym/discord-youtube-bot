{"version":3,"sources":["../src/models/WebSub.ts"],"names":[],"mappings":"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","file":"WebSub.js","sourcesContent":["import {BeforeValidate, Column, HasMany, Model, Table} from \"sequelize-typescript\";\nimport {DataTypes} from \"sequelize\";\nimport {SnowflakeUtil} from \"discord.js\";\nimport crypto = require(\"crypto\");\nimport {YoutubeVideo} from \"./YoutubeVideo\";\nimport {Subscription} from \"./Subscription\";\nimport axios from \"axios\";\nimport {get as config} from \"../config\";\nimport {google, youtube_v3} from \"googleapis\";\nimport {logger} from \"../logger\";\n\n@Table({tableName: 'web_subs', createdAt: 'created_at', updatedAt: 'updated_at', collate: 'utf8_bin'})\nexport class WebSub extends Model<WebSub> {\n\n    @BeforeValidate\n    protected static makeId(self: WebSub) {\n        if (!self.id) {\n            self.id = SnowflakeUtil.generate() as any;\n        }\n        if (!self.secret) {\n            self.secret = crypto.randomBytes(20).toString('base64');\n        }\n    }\n\n    @Column({type: DataTypes.BIGINT.UNSIGNED, primaryKey: true})\n    public id: number;\n\n    @Column({type: DataTypes.STRING, allowNull: false, unique: true})\n    public youtube_channel: string;\n\n    @Column({type: DataTypes.STRING, allowNull: false})\n    public secret: string;\n\n    @Column({type: DataTypes.DATE, allowNull: true})\n    public created_at: Date;\n\n    @Column({type: DataTypes.DATE, allowNull: true})\n    public updated_at: Date;\n\n    @Column({type: DataTypes.DATE, allowNull: true})\n    public expires_at: Date;\n\n    @HasMany(() => YoutubeVideo, {foreignKey: 'sub_id'})\n    public videos: YoutubeVideo[];\n\n    @HasMany(() => Subscription, {foreignKey: 'sub_id'})\n    public subscriptions: Subscription[];\n\n    public get topic_url(): string {\n        let url = new URL('https://www.youtube.com/xml/feeds/videos.xml');\n        let params = new URLSearchParams([['channel_id', this.youtube_channel]]);\n        url.search = params.toString();\n        return url.toString();\n    }\n\n    public async fetchSnippet(): Promise<youtube_v3.Schema$Channel>{\n        try{\n            let res = await google.youtube('v3').channels.list({\n                id: [this.youtube_channel],\n                part: ['snippet'],\n            });\n            return res.data.items[0];\n        } catch (_) {\n            return null;\n        }\n    }\n\n    public async subscribe(mode: 'subscribe' | 'unsubscribe' = 'subscribe') {\n        let data = new URLSearchParams();\n        data.append('hub.callback', `${config('websub.url')}/websub/${this.id}`);\n        data.append('hub.mode', mode);\n        data.append('hub.topic', this.topic_url);\n        data.append('hub.secret', this.secret);\n        await axios.post('https://pubsubhubbub.appspot.com/subscribe', data)\n            .catch((_) => {\n                logger.warn(`[WebSub] Failed to ${mode} ` + this.topic_url);\n            });\n    }\n}"]}
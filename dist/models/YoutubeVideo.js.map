{"version":3,"sources":["../src/models/YoutubeVideo.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+DAA0F;AAC1F,yCAAoC;AACpC,qCAAgC;AAChC,iDAA4C;AAC5C,2CAA8C;AAG9C,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,4BAAmB;IA8BpC,YAAY;;YACrB,IAAI;gBACA,IAAI,GAAG,GAAG,MAAM,mBAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;oBAC7C,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACnB,IAAI,EAAE,CAAC,SAAS,EAAE,sBAAsB,CAAC;iBAC5C,CAAC,CAAC;gBACH,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC5B;YAAC,OAAO,CAAC,EAAE;gBACR,OAAO,IAAI,CAAC;aACf;QACL,CAAC;KAAA;CACJ,CAAA;AAtCG;IADC,IAAA,6BAAM,EAAC,EAAC,IAAI,EAAE,qBAAS,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,EAAC,CAAC;;8CAC3B;AAIxB;IAFC,IAAA,iCAAU,EAAC,GAAG,EAAE,CAAC,eAAM,CAAC;IACxB,IAAA,6BAAM,EAAC,EAAC,IAAI,EAAE,qBAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC;;4CACtC;AAGtB;IADC,IAAA,6BAAM,EAAC,EAAC,IAAI,EAAE,qBAAS,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC;;qDACpB;AAG/B;IADC,IAAA,6BAAM,EAAC,EAAC,IAAI,EAAE,qBAAS,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;8BAChC,IAAI;6CAAC;AAGrB;IADC,IAAA,6BAAM,EAAC,EAAC,IAAI,EAAE,qBAAS,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;8BAC7B,IAAI;gDAAC;AAGxB;IADC,IAAA,6BAAM,EAAC,EAAC,IAAI,EAAE,qBAAS,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;8BAC7B,IAAI;gDAAC;AAGxB;IADC,IAAA,6BAAM,EAAC,EAAC,IAAI,EAAE,qBAAS,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;8BAC7B,IAAI;gDAAC;AAGxB;IADC,IAAA,gCAAS,EAAC,GAAG,EAAE,CAAC,eAAM,EAAE,EAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAC,CAAC;8BACtE,eAAM;kDAAC;AAG5B;IADC,IAAA,8BAAO,EAAC,GAAG,EAAE,CAAC,2BAAY,EAAE,UAAU,CAAC;;mDACH;AA5B5B,YAAY;IADxB,IAAA,4BAAK,EAAC,EAAC,SAAS,EAAE,gBAAgB,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,UAAU,EAAC,CAAC;GAC/F,YAAY,CAyCxB;AAzCY,oCAAY","file":"YoutubeVideo.js","sourcesContent":["import {BelongsTo, Column, ForeignKey, HasMany, Model, Table} from \"sequelize-typescript\";\nimport {DataTypes} from \"sequelize\";\nimport {WebSub} from \"./WebSub\";\nimport {Notification} from \"./Notification\";\nimport {google, youtube_v3} from \"googleapis\";\n\n@Table({tableName: 'youtube_videos', createdAt: 'created_at', updatedAt: 'updated_at', collate: 'utf8_bin'})\nexport class YoutubeVideo extends Model<YoutubeVideo> {\n\n    @Column({type: DataTypes.STRING, primaryKey: true})\n    public video_id: string;\n\n    @ForeignKey(() => WebSub)\n    @Column({type: DataTypes.BIGINT.UNSIGNED, allowNull: false})\n    public sub_id: number;\n\n    @Column({type: DataTypes.STRING, allowNull: false})\n    public youtube_channel: string;\n\n    @Column({type: DataTypes.DATE, allowNull: true})\n    public live_at: Date;\n\n    @Column({type: DataTypes.DATE, allowNull: true})\n    public deleted_at: Date;\n\n    @Column({type: DataTypes.DATE, allowNull: true})\n    public created_at: Date;\n\n    @Column({type: DataTypes.DATE, allowNull: true})\n    public updated_at: Date;\n\n    @BelongsTo(() => WebSub, {foreignKey: 'sub_id', onDelete: 'cascade', onUpdate: 'restrict'})\n    public subscription: WebSub;\n\n    @HasMany(() => Notification, 'video_id')\n    public notifications: Notification[];\n\n    public async fetchSnippet(): Promise<youtube_v3.Schema$Video> {\n        try {\n            let res = await google.youtube('v3').videos.list({\n                id: [this.video_id],\n                part: ['snippet', 'liveStreamingDetails']\n            });\n            return res.data.items[0];\n        } catch (_) {\n            return null;\n        }\n    }\n}\n"]}
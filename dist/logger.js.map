{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":";;;AAAA,8CAA8C;AAC9C,qCAAgC;AAChC,iCAAkC;AAKlC,MAAM,QAAQ,GAAG,IAAI,iBAAO,CAAC;IACzB,MAAM,EAAE,OAAO,CAAC,MAAM;IACtB,MAAM,EAAE,OAAO,CAAC,MAAM;IACtB,SAAS,EAAE,KAAK;CACnB,CAAC,CAAC;AAEH,MAAM,MAAM,GAAG;IACX,GAAG,EAAE;QACD,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;QACvB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;IACD,IAAI,EAAE;QACF,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;QACvB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;IACD,KAAK,EAAE;QACH,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACtB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;IACD,IAAI,EAAE;QACF,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;QACxB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;IACD,KAAK,EAAE;QACH,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG;QACrB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;CACJ,CAAA;AAEY,QAAA,MAAM,GAAW,EAAS,CAAC;AAExC,KAAK,MAAM,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;IAClC,cAAM,CAAC,EAAE,CAAC,GAAG;QACT,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,MAAM,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAC5G,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC5C,CAAC,CAAA;CACJ","file":"logger.js","sourcesContent":["import * as ansi from 'ansi-escape-sequences';\r\nimport {Console} from 'console';\r\nimport moment = require(\"moment\");\r\n\r\ntype LogFn = (...data: any) => void;\r\ntype Logger = { log: LogFn, info: LogFn, debug: LogFn, warn: LogFn, error: LogFn }\r\n\r\nconst _console = new Console({\r\n    stdout: process.stdout,\r\n    stderr: process.stderr,\r\n    colorMode: false,\r\n});\r\n\r\nconst config = {\r\n    log: {\r\n        color: ansi.style.white,\r\n        io: process.stdout,\r\n    },\r\n    info: {\r\n        color: ansi.style.green,\r\n        io: process.stdout,\r\n    },\r\n    debug: {\r\n        color: ansi.style.cyan,\r\n        io: process.stdout,\r\n    },\r\n    warn: {\r\n        color: ansi.style.yellow,\r\n        io: process.stderr,\r\n    },\r\n    error: {\r\n        color: ansi.style.red,\r\n        io: process.stderr,\r\n    },\r\n}\r\n\r\nexport const logger: Logger = {} as any;\r\n\r\nfor (const fn of Object.keys(config)) {\r\n    logger[fn] = function () {\r\n        config[fn].io.write(`${config[fn].color}[${moment().format('YYYY-MM-DD HH:mm:ss')}][${fn.toUpperCase()}] `);\r\n        _console[fn].apply(_console, arguments);\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":";;;AAAA,8CAA8C;AAC9C,mCAAoC;AACpC,6BAA6B;AAC7B,yBAAyB;AACzB,uCAAuC;AACvC,iCAAkC;AAYlC,MAAa,MAAO,SAAQ,qBAAY;IAMpC;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;CACJ;AATD,wBASC;AAED,KAAK,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE;IAChD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,UAAU,GAAG,IAAS;QAC5C,IAAI,OAAO,GAAG,IAAI,MAAM,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,KAAK,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC;QACpF,IAAI,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACjD,KAAK,IAAI,MAAM,IAAI,IAAI,EAAE;YACrB,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;YAChD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;SACvF;IACL,CAAC,CAAA;CACJ;AAED,MAAM,MAAM,GAAG;IACX,GAAG,EAAE;QACD,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;QACvB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;IACD,IAAI,EAAE;QACF,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;QACvB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;IACD,IAAI,EAAE;QACF,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;QACxB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;IACD,KAAK,EAAE;QACH,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG;QACrB,EAAE,EAAE,OAAO,CAAC,MAAM;KACrB;CACJ,CAAA;AAED,SAAgB,aAAa,CAAC,KAAe,EAAE,MAAc,EAAE,IAAS;IACpE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC;IACrD,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjD,SAAyC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;AACpE,CAAC;AAJD,sCAIC;AAEY,QAAA,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AACnC,cAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC","file":"logger.js","sourcesContent":["import * as ansi from 'ansi-escape-sequences';\nimport {EventEmitter} from \"events\";\nimport * as util from \"util\";\nimport * as os from \"os\";\nimport * as inspector from \"inspector\";\nimport moment = require(\"moment\");\n\ntype LogFn = (this: Logger, ...data: any) => void;\n\nexport type LogLevel = 'log' | 'info' | 'warn' | 'error';\n\nexport declare interface Logger {\n    on(event: 'record', listener: (level: LogLevel, data: string, raw: any) => any): this;\n\n    once(event: 'record', listener: (level: LogLevel, data: string, raw: any) => any): this;\n}\n\nexport class Logger extends EventEmitter {\n    readonly log: LogFn;\n    readonly info: LogFn;\n    readonly warn: LogFn;\n    readonly error: LogFn;\n\n    constructor() {\n        super();\n    }\n}\n\nfor (let level of ['log', 'info', 'warn', 'error']) {\n    Logger.prototype[level] = function (...data: any) {\n        let prepend = `[${moment().format('YYYY-MM-DD HH:mm:ss')}][${level.toUpperCase()}]`;\n        let indent = os.EOL + ' '.repeat(prepend.length);\n        for (let record of data) {\n            let str = util.inspect(record, false, 2, false);\n            this.emit('record', level, prepend + str.split(/\\r?\\n|\\n?\\r/).join(indent), record);\n        }\n    }\n}\n\nconst config = {\n    log: {\n        color: ansi.style.white,\n        io: process.stdout,\n    },\n    info: {\n        color: ansi.style.green,\n        io: process.stdout,\n    },\n    warn: {\n        color: ansi.style.yellow,\n        io: process.stderr,\n    },\n    error: {\n        color: ansi.style.red,\n        io: process.stderr,\n    },\n}\n\nexport function StdioListener(level: LogLevel, record: string, data: any) {\n    config[level].io.write(config[level].color + record);\n    config[level].io.write(os.EOL + ansi.style.reset);\n    (inspector as any as { console: Console }).console[level](data);\n}\n\nexport const logger = new Logger();\nlogger.on('record', StdioListener);\n"]}
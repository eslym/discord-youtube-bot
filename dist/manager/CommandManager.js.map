{"version":3,"sources":["../src/manager/CommandManager.ts"],"names":[],"mappings":"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","file":"CommandManager.js","sourcesContent":["import {ApplicationCommand, ApplicationCommandData, CommandInteraction, Guild, Interaction} from \"discord.js\";\r\nimport {bot} from \"../bot\";\r\nimport {catchLog} from \"../utils/catchLog\";\r\nimport {YoutubeCommand} from \"../command/YoutubeCommand\";\r\nimport {CommandMap} from \"../models/CommandMap\";\r\nimport {Op} from \"sequelize\";\r\nimport {logger} from \"../logger\";\r\nimport {PermissionCommand} from \"../command/PermissionCommand\";\r\nimport Dict = NodeJS.Dict;\r\n\r\nexport module CommandManager {\r\n\r\n    const commands: Dict<Command> = {};\r\n    const mapping: Dict<string> = {};\r\n\r\n    function register(command: Command) {\r\n        commands[command.id] = command;\r\n    }\r\n\r\n    async function syncCommand(guild: Guild) {\r\n        let cmds = await guild.commands.fetch();\r\n        await CommandMap.destroy({\r\n            where: {\r\n                id: {[Op.notIn]: Array.from(cmds.keys())},\r\n                guild_id: guild.id,\r\n            }\r\n        });\r\n        let mappings: Dict<CommandMap> = await CommandMap.findAll({\r\n            where: {\r\n                guild_id: guild.id,\r\n            }\r\n        }).then(m => m.map(c => [c.id, c])).then(e => Object.fromEntries(e));\r\n        let previous: Dict<ApplicationCommand> = Object.fromEntries(cmds.entries());\r\n        let missing: Dict<Command> = Object.fromEntries(Object.entries(commands));\r\n        for (let cmd of guild.commands.cache.values()) {\r\n            if (mappings.hasOwnProperty(cmd.id)) {\r\n                let cmd_id = mappings[cmd.id].command_id;\r\n                delete missing[cmd_id];\r\n                delete previous[cmd.id];\r\n                await cmd.edit(commands[cmd_id].definition);\r\n                mapping[cmd.id] = cmd_id;\r\n            }\r\n        }\r\n        for (let cmd of Object.values(previous)) {\r\n            await cmd.delete();\r\n        }\r\n        for (let def of Object.values(missing)) {\r\n            let cmd = await guild.commands.create(def.definition);\r\n            await cmd.permissions.set({\r\n                permissions: [{\r\n                    type: \"USER\",\r\n                    id: guild.ownerId,\r\n                    permission: true\r\n                }]\r\n            });\r\n            mapping[cmd.id] = def.id;\r\n            await CommandMap.create({\r\n                id: cmd.id,\r\n                command_id: def.id,\r\n                guild_id: guild.id,\r\n            });\r\n        }\r\n        logger.info(`Command synced for ${guild.id}(${guild.name}).`);\r\n    }\r\n\r\n    export async function boot() {\r\n        bot.on('interactionCreate', catchLog(CommandManager.execute));\r\n\r\n        register(YoutubeCommand);\r\n        register(PermissionCommand);\r\n\r\n        let guilds = await bot.guilds.fetch();\r\n        for (let guild of guilds.values()) {\r\n            await syncCommand(await guild.fetch())\r\n                .catch(logger.warn);\r\n        }\r\n        bot.on('guildCreate', catchLog(syncCommand));\r\n        bot.on('guildDelete', catchLog(async (guild: Guild) => {\r\n            let ids = await CommandMap.findAll({\r\n                where: {\r\n                    guild_id: guild.id,\r\n                }\r\n            }).then(m => m.map(c => c.id));\r\n            for (let id of ids) {\r\n                delete mapping[id];\r\n            }\r\n            await CommandMap.destroy({\r\n                where: {\r\n                    guild_id: guild.id,\r\n                }\r\n            });\r\n        }))\r\n    }\r\n\r\n    export async function execute(interaction: Interaction) {\r\n        if (interaction.isCommand()) {\r\n            let cmd_id = mapping[interaction.commandId];\r\n            await commands[cmd_id].handle(interaction);\r\n        }\r\n    }\r\n\r\n    export async function findCommand(guild: Guild, uuid: string) {\r\n        let commands = await guild.commands.fetch();\r\n        for (let cmd of commands.values()) {\r\n            if (mapping[cmd.id] === uuid) {\r\n                return cmd;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport interface Command {\r\n    id: string;\r\n    definition: ApplicationCommandData;\r\n\r\n    handle(interaction: CommandInteraction): Promise<unknown> | unknown;\r\n}\r\n"]}
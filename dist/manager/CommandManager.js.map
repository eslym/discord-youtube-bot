{"version":3,"sources":["../src/manager/CommandManager.ts"],"names":[],"mappings":"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","file":"CommandManager.js","sourcesContent":["import {\n    ApplicationCommand,\n    ApplicationCommandData,\n    CommandInteraction,\n    Guild,\n    GuildResolvable,\n    Interaction\n} from \"discord.js\";\nimport {bot} from \"../bot\";\nimport {catchLog} from \"../utils/catchLog\";\nimport {YoutubeCommand} from \"../command/YoutubeCommand\";\nimport {CommandMap} from \"../models/CommandMap\";\nimport {Op} from \"sequelize\";\nimport Dict = NodeJS.Dict;\nimport {logger} from \"../logger\";\nimport {PermissionCommand} from \"../command/PermissionCommand\";\n\nexport module CommandManager {\n\n    const commands: Dict<Command> = {};\n    const mapping: Dict<string> = {};\n\n    function register(command: Command) {\n        commands[command.id] = command;\n    }\n\n    async function syncCommand(guild: Guild) {\n        let cmds = await guild.commands.fetch();\n        await CommandMap.destroy({\n            where: {\n                id: {[Op.notIn]: Array.from(cmds.keys())},\n                guild_id: guild.id,\n            }\n        });\n        let mappings: Dict<CommandMap> = await CommandMap.findAll({\n            where: {\n                guild_id: guild.id,\n            }\n        }).then(m => m.map(c => [c.id, c])).then(e => Object.fromEntries(e));\n        let previous: Dict<ApplicationCommand> = Object.fromEntries(cmds.entries());\n        let missing: Dict<Command> = Object.fromEntries(Object.entries(commands));\n        for (let cmd of guild.commands.cache.values()) {\n            if (mappings.hasOwnProperty(cmd.id)) {\n                let cmd_id = mappings[cmd.id].command_id;\n                delete missing[cmd_id];\n                delete previous[cmd.id];\n                await cmd.edit(commands[cmd_id].definition);\n                mapping[cmd.id] = cmd_id;\n            }\n        }\n        for (let cmd of Object.values(previous)) {\n            await cmd.delete();\n        }\n        for (let def of Object.values(missing)) {\n            let cmd = await guild.commands.create(def.definition);\n            await cmd.permissions.set({\n                permissions: [{\n                    type: \"USER\",\n                    id: guild.ownerId,\n                    permission: true\n                }]\n            });\n            mapping[cmd.id] = def.id;\n            await CommandMap.create({\n                id: cmd.id,\n                command_id: def.id,\n                guild_id: guild.id,\n            });\n        }\n        logger.info(`Command synced for ${guild.id}(${guild.name}).`);\n    }\n\n    export async function boot() {\n        bot.on('interactionCreate', catchLog(CommandManager.execute));\n\n        register(YoutubeCommand);\n        register(PermissionCommand);\n\n        let guilds = await bot.guilds.fetch();\n        for(let guild of guilds.values()){\n            await syncCommand(await guild.fetch())\n                .catch(logger.warn);\n        }\n        bot.on('guildCreate', catchLog(syncCommand));\n        bot.on('guildDelete', catchLog(async (guild: Guild)=>{\n            let ids = await CommandMap.findAll({\n                where: {\n                    guild_id: guild.id,\n                }\n            }).then(m=>m.map(c=>c.id));\n            for(let id of ids){\n                delete mapping[id];\n            }\n            await CommandMap.destroy({\n                where: {\n                    guild_id: guild.id,\n                }\n            });\n        }))\n    }\n\n    export async function execute(interaction: Interaction) {\n        if (interaction.isCommand()) {\n            let cmd_id = mapping[interaction.commandId];\n            await commands[cmd_id].handle(interaction);\n        }\n    }\n\n    export async function findCommand(guild: Guild, uuid: string){\n        let commands = await guild.commands.fetch();\n        for (let cmd of commands.values()){\n            if(mapping[cmd.id] === uuid){\n                return cmd;\n            }\n        }\n        return null;\n    }\n}\n\nexport interface Command {\n    id: string;\n    definition: ApplicationCommandData;\n\n    handle(interaction: CommandInteraction): Promise<unknown> | unknown;\n}\n"]}
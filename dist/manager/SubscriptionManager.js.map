{"version":3,"sources":["../src/manager/SubscriptionManager.ts"],"names":[],"mappings":"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","file":"SubscriptionManager.js","sourcesContent":["import {Channel, ChannelResolvable, Guild, TextBasedChannels} from \"discord.js\";\r\nimport {bot} from \"../bot\";\r\nimport {Subscription} from \"../models/Subscription\";\r\nimport {WebSub} from \"../models/WebSub\";\r\nimport {col, fn, Op} from \"sequelize\";\r\nimport {catchLog} from \"../utils/catchLog\";\r\nimport {YoutubeVideo} from \"../models/YoutubeVideo\";\r\nimport {format, get as config} from \"../config\";\r\nimport {Notification} from \"../models/Notification\";\r\nimport {logger} from \"../logger\";\r\nimport {google} from \"googleapis\";\r\nimport cron = require(\"node-cron\");\r\nimport moment = require(\"moment\");\r\n\r\ninterface ChannelSubscribeOptions {\r\n    notify_video?: boolean;\r\n    notify_live?: boolean;\r\n    notify_reschedule?: boolean;\r\n    notify_starting?: boolean;\r\n}\r\n\r\nlet booted = false;\r\n\r\nasync function cleanUpWebSub() {\r\n    let subs = await WebSub.findAll({\r\n        attributes: {\r\n            include: ['WebSub.id', [fn('COUNT', col('subscriptions.id')), 'subs']],\r\n            exclude: Object.keys(WebSub.rawAttributes).filter(k=>k!=='id'),\r\n        },\r\n        include: [{\r\n            model: Subscription,\r\n            attributes: {exclude:Object.keys(Subscription.rawAttributes)}\r\n        }],\r\n        group: ['WebSub.id'],\r\n        having: {\r\n            subs: 0\r\n        }\r\n    });\r\n    subs = await WebSub.findAll({\r\n        where: {\r\n            id: {[Op.in]: subs.map(s => s.id)}\r\n        }\r\n    });\r\n    for (let websub of subs) {\r\n        await websub.subscribe('unsubscribe');\r\n    }\r\n}\r\n\r\nexport module SubscriptionManager {\r\n    import Dict = NodeJS.Dict;\r\n\r\n    export async function get(channel: ChannelResolvable): Promise<ChannelSubscriptionManager> {\r\n        let ch = channel as Channel;\r\n        if (typeof channel === 'string') {\r\n            ch = bot.channels.resolve(channel);\r\n            if (!ch) {\r\n                ch = await bot.channels.fetch(channel);\r\n            }\r\n            if (!ch) {\r\n                return null;\r\n            }\r\n        }\r\n        if (ch.type !== 'DM' && ch.type !== 'GUILD_TEXT' && ch.type !== 'GUILD_NEWS') {\r\n            throw new TypeError('Channel is not text based.');\r\n        }\r\n        return new Manager(ch as TextBasedChannels);\r\n    }\r\n\r\n    export function boot() {\r\n        if (booted) return;\r\n        booted = true;\r\n        cron.schedule('* * * * *', catchLog(SubscriptionManager.checkNotification));\r\n        cron.schedule('*/5 * * * *', catchLog(SubscriptionManager.checkVideoUpdates));\r\n        bot.on('guildDelete', catchLog(async (guild: Guild) => {\r\n            let destroyed = await Subscription.destroy({\r\n                where: {\r\n                    discord_guild_id: guild.id,\r\n                }\r\n            });\r\n            if (destroyed > 0) {\r\n                await cleanUpWebSub();\r\n            }\r\n        }));\r\n    }\r\n\r\n    export async function checkNotification() {\r\n        let notifications = await Notification.findAll({\r\n            include: [YoutubeVideo],\r\n            where: {\r\n                type: NotificationType.STARTING,\r\n                scheduled_at: {[Op.lte]: new Date()},\r\n                notified_at: null,\r\n            }\r\n        });\r\n        for (let notification of notifications) {\r\n            try {\r\n                let video = notification.video;\r\n                let websub = await video.$get('subscription');\r\n                let subscriptions = await websub.$get('subscriptions');\r\n                for (let sub of subscriptions) {\r\n                    await sub.notify(notification.type, video);\r\n                }\r\n                notification.notified_at = new Date();\r\n                notification.save();\r\n            } catch (error) {\r\n                logger.warn(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    export async function checkVideoUpdates() {\r\n        let videos = await YoutubeVideo.findAll({\r\n            include: [Notification],\r\n            where: {\r\n                live_at: {[Op.gt]: new Date()},\r\n                '$notifications.notified_at$': null,\r\n            }\r\n        });\r\n        if (videos.length === 0) {\r\n            return;\r\n        }\r\n        let ids = videos.map(v => v.video_id);\r\n        let dict: Dict<YoutubeVideo> = Object\r\n            .fromEntries(videos.map(v => [v.video_id, v]));\r\n        let res = await google.youtube('v3').videos.list({\r\n            id: ids, part: ['id', 'liveStreamingDetails']\r\n        });\r\n        for (let schema of res.data.items) {\r\n            if (\r\n                !schema.liveStreamingDetails ||\r\n                !schema.liveStreamingDetails.scheduledStartTime ||\r\n                schema.liveStreamingDetails.actualStartTime\r\n            ) {\r\n                continue;\r\n            }\r\n            let newLive = moment(schema.liveStreamingDetails.scheduledStartTime);\r\n            let video = dict[schema.id];\r\n            if (!newLive.isSame(video.live_at)) {\r\n                video.live_at = newLive.toDate();\r\n                video.save();\r\n                let notifications = await Notification.findAll({\r\n                    where: {\r\n                        video_id: schema.id,\r\n                        type: NotificationType.STARTING,\r\n                    }\r\n                });\r\n                let schedule = newLive.subtract({minute: 5}).startOf('minute').toDate();\r\n                for (let notification of notifications) {\r\n                    notification.scheduled_at = schedule;\r\n                    notification.notified_at = null;\r\n                    await notification.save();\r\n                }\r\n                let websub = await video.$get('subscription');\r\n                let subs = await websub.$get('subscriptions');\r\n                for (let sub of subs) {\r\n                    await sub.notify(NotificationType.RESCHEDULE, video);\r\n                }\r\n                await Notification.create({\r\n                    type: NotificationType.RESCHEDULE,\r\n                    video_id: schema.id,\r\n                    scheduled_at: new Date()\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ChannelSubscriptionManager {\r\n    getChannel(): TextBasedChannels;\r\n\r\n    hasSubscription(youtube_channel: string): Promise<boolean>;\r\n\r\n    subscribe(youtube_channel: string, options?: ChannelSubscribeOptions): Promise<boolean>;\r\n\r\n    unsubscribe(youtube_channel: string): Promise<boolean>;\r\n\r\n    unsubscribeAll(): Promise<number>;\r\n\r\n    listSubscription(): Promise<Subscription[]>;\r\n\r\n    getSubscription(youtube_channel: string): Promise<Subscription>;\r\n\r\n    notify(type: NotificationType, subscription: Subscription, video: YoutubeVideo): Promise<boolean>;\r\n}\r\n\r\nclass Manager implements ChannelSubscriptionManager {\r\n    protected _channel: TextBasedChannels;\r\n\r\n    constructor(channel: TextBasedChannels) {\r\n        this._channel = channel;\r\n    }\r\n\r\n    getChannel() {\r\n        return this._channel;\r\n    }\r\n\r\n    async hasSubscription(youtube_channel: string): Promise<boolean> {\r\n        return await Subscription.count({\r\n            include: [WebSub],\r\n            where: {\r\n                discord_channel_id: this._channel.id,\r\n                '$websub.youtube_channel_id$': youtube_channel,\r\n            }\r\n        }) > 0;\r\n    }\r\n\r\n    async subscribe(youtube_channel: string, options?: ChannelSubscribeOptions): Promise<boolean> {\r\n        let data: any = {\r\n            youtube_channel_id: youtube_channel\r\n        };\r\n        let [websub, created] = await WebSub.findOrCreate({\r\n            where: data,\r\n            defaults: data,\r\n        });\r\n        data = {\r\n            websub_id: websub.id,\r\n            discord_channel_id: this._channel.id,\r\n        }\r\n        if (this._channel.type !== 'DM') {\r\n            data.discord_guild_id = this._channel.guildId;\r\n        }\r\n        let [_, newSub] = await Subscription.findOrCreate({\r\n            where: data,\r\n            defaults: {\r\n                ...data, ...options\r\n            },\r\n        });\r\n        if (created) {\r\n            await websub.subscribe();\r\n        }\r\n        return newSub;\r\n    }\r\n\r\n    async unsubscribe(youtube_channel: string): Promise<boolean> {\r\n        let subscription = await Subscription.findOne({\r\n            include: [WebSub],\r\n            where: {\r\n                discord_channel_id: this._channel.id,\r\n                '$websub.youtube_channel_id$': youtube_channel,\r\n            }\r\n        });\r\n        if (!subscription) {\r\n            return false;\r\n        }\r\n        let websub = subscription.websub;\r\n        await subscription.destroy();\r\n        if (await websub.$count('subscriptions') === 0) {\r\n            await websub.subscribe('unsubscribe');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async unsubscribeAll(): Promise<number> {\r\n        let destroyed = await Subscription.destroy({\r\n            where: {\r\n                discord_channel_id: this._channel.id,\r\n            }\r\n        });\r\n        if (destroyed > 0) {\r\n            await cleanUpWebSub();\r\n        }\r\n        return destroyed;\r\n    }\r\n\r\n    async listSubscription(): Promise<Subscription[]> {\r\n        return Subscription.findAll({\r\n            include: [WebSub],\r\n            where: {\r\n                discord_channel_id: this._channel.id,\r\n            }\r\n        });\r\n    }\r\n\r\n    async getSubscription(youtube_channel: string): Promise<Subscription> {\r\n        return Subscription.findOne({\r\n            include: [WebSub],\r\n            where: {\r\n                discord_channel_id: this._channel.id,\r\n                '$websub.youtube_channel_id$': youtube_channel,\r\n            }\r\n        });\r\n    }\r\n\r\n    async notify(type: NotificationType, subscription: Subscription, video: YoutubeVideo): Promise<boolean> {\r\n        if (!subscription[\"notify_\" + type]) {\r\n            return false;\r\n        }\r\n        let meta = await video.fetchYoutubeVideoMeta();\r\n        let data = {\r\n            channel: meta.snippet.channelTitle,\r\n            title: meta.snippet.title,\r\n            url: video.url,\r\n        }\r\n        if (subscription.mention && subscription.mention.length > 0) {\r\n            data['mentions'] = format(config('$.notification.mentions'), {\r\n                mentions: subscription.mention.join('')\r\n            });\r\n        }\r\n        if (video.live_at) {\r\n            data['schedule'] = moment(video.live_at)\r\n                .locale(config('$.notification.locale'))\r\n                .format(config('$.notification.timeFormat'));\r\n        }\r\n        let notification = format(config(`$.notification.${type}`), data);\r\n        await this._channel.send(notification);\r\n        return true;\r\n    }\r\n}\r\n\r\nexport enum NotificationType {\r\n    VIDEO = 'video',\r\n    LIVE = 'live',\r\n    RESCHEDULE = 'reschedule',\r\n    STARTING = 'starting',\r\n}\r\n"]}
{"version":3,"sources":["../src/manager/SubscriptionManager.ts"],"names":[],"mappings":";;;AACA,gCAA2B;AAC3B,yDAAoD;AACpD,6CAAwC;AACxC,yCAA6C;AAC7C,gDAA2C;AAC3C,yDAAoD;AACpD,sCAAgD;AAChD,yDAAoD;AACpD,sCAAiC;AACjC,2CAAkC;AAClC,kCAAmC;AACnC,iCAAkC;AASlC,IAAI,MAAM,GAAG,KAAK,CAAC;AAEnB,IAAc,mBAAmB,CA2GhC;AA3GD,WAAc,mBAAmB;IAGtB,KAAK,UAAU,GAAG,CAAC,OAA0B;QAChD,IAAI,EAAE,GAAG,OAAkB,CAAC;QAC5B,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,EAAE,GAAG,SAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACnC,IAAI,CAAC,EAAE,EAAE;gBACL,EAAE,GAAG,MAAM,SAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAC1C;YACD,IAAI,CAAC,EAAE,EAAE;gBACL,OAAO,IAAI,CAAC;aACf;SACJ;QACD,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,EAAE;YAC1E,MAAM,IAAI,SAAS,CAAC,4BAA4B,CAAC,CAAC;SACrD;QACD,OAAO,IAAI,OAAO,CAAC,EAAuB,CAAC,CAAC;IAChD,CAAC;IAfqB,uBAAG,MAexB,CAAA;IAED,SAAgB,IAAI;QAChB,IAAI,MAAM;YAAE,OAAO;QACnB,MAAM,GAAG,IAAI,CAAC;QACd,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAA,mBAAQ,EAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAA,mBAAQ,EAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAClF,CAAC;IALe,wBAAI,OAKnB,CAAA;IAEM,KAAK,UAAU,iBAAiB;QACnC,IAAI,aAAa,GAAG,MAAM,2BAAY,CAAC,OAAO,CAAC;YAC3C,OAAO,EAAE,CAAC,2BAAY,CAAC;YACvB,KAAK,EAAE;gBACH,IAAI,EAAE,gBAAgB,CAAC,QAAQ;gBAC/B,YAAY,EAAE,EAAC,CAAC,cAAE,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,EAAE,EAAC;gBACpC,WAAW,EAAE,IAAI;aACpB;SACJ,CAAC,CAAC;QACH,KAAI,IAAI,YAAY,IAAI,aAAa,EAAC;YAClC,IAAG;gBACC,IAAI,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;gBAC/B,IAAI,MAAM,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC9C,IAAI,aAAa,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBACtD,KAAI,IAAI,GAAG,IAAI,aAAa,EAAC;oBACzB,MAAM,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBAC9C;gBACD,YAAY,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;gBACtC,YAAY,CAAC,IAAI,EAAE,CAAC;aACvB;YAAC,OAAO,KAAK,EAAC;gBACX,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtB;SACJ;IACL,CAAC;IAvBqB,qCAAiB,oBAuBtC,CAAA;IAEM,KAAK,UAAU,iBAAiB;QACnC,IAAI,MAAM,GAAG,MAAM,2BAAY,CAAC,OAAO,CAAC;YACpC,OAAO,EAAE,CAAC,2BAAY,CAAC;YACvB,KAAK,EAAE;gBACH,OAAO,EAAE,EAAC,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,IAAI,IAAI,EAAE,EAAC;gBAC9B,6BAA6B,EAAE,IAAI;aACtC;SACJ,CAAC,CAAC;QACH,IAAG,MAAM,CAAC,MAAM,KAAK,CAAC,EAAC;YACnB,OAAO;SACV;QACD,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAI,IAAI,GAAuB,MAAM;aAChC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA,EAAE,CAAA,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,IAAI,GAAG,GAAG,MAAM,mBAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;YAC7C,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,sBAAsB,CAAC;SAChD,CAAC,CAAC;QACH,KAAI,IAAI,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,EAAC;YAC7B,IACI,CAAC,MAAM,CAAC,oBAAoB;gBAC5B,CAAC,MAAM,CAAC,oBAAoB,CAAC,kBAAkB;gBAC/C,MAAM,CAAC,oBAAoB,CAAC,eAAe,EAC7C;gBACE,SAAS;aACZ;YACD,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;YACrE,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;gBAChC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;gBACjC,KAAK,CAAC,IAAI,EAAE,CAAC;gBACb,IAAI,aAAa,GAAG,MAAM,2BAAY,CAAC,OAAO,CAAC;oBAC3C,KAAK,EAAE;wBACH,QAAQ,EAAE,MAAM,CAAC,EAAE;wBACnB,IAAI,EAAE,gBAAgB,CAAC,QAAQ;qBAClC;iBACJ,CAAC,CAAC;gBACH,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;gBACxE,KAAK,IAAI,YAAY,IAAI,aAAa,EAAE;oBACpC,YAAY,CAAC,YAAY,GAAG,QAAQ,CAAC;oBACrC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC;oBAChC,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;iBAC7B;gBACD,IAAI,MAAM,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC9C,IAAI,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC9C,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;oBAClB,MAAM,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;iBACxD;gBACD,MAAM,2BAAY,CAAC,MAAM,CAAC;oBACtB,IAAI,EAAE,gBAAgB,CAAC,UAAU;oBACjC,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,YAAY,EAAE,IAAI,IAAI,EAAE;iBAC3B,CAAC,CAAC;aACN;SACJ;IACL,CAAC;IAtDqB,qCAAiB,oBAsDtC,CAAA;AACL,CAAC,EA3Ga,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QA2GhC;AAaD,MAAM,OAAO;IAGT,YAAY,OAA0B;QAClC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED,UAAU;QACN,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,eAAuB;QACzC,OAAO,MAAM,2BAAY,CAAC,KAAK,CAAC;YAC5B,OAAO,EAAE,CAAC,eAAM,CAAC;YACjB,KAAK,EAAE;gBACH,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACpC,6BAA6B,EAAE,eAAe;aACjD;SACJ,CAAC,GAAG,CAAC,CAAC;IACX,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,eAAuB,EAAE,OAAiC;QACtE,IAAI,IAAI,GAAQ;YACZ,kBAAkB,EAAE,eAAe;SACtC,CAAC;QACF,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,MAAM,eAAM,CAAC,YAAY,CAAC;YAC9C,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,IAAI;SACjB,CAAC,CAAC;QACH,IAAI,GAAG;YACH,SAAS,EAAE,MAAM,CAAC,EAAE;YACpB,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;SACvC,CAAA;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,EAAE;YAC7B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;SACjD;QACD,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,MAAM,2BAAY,CAAC,YAAY,CAAC;YAC9C,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE;gBACN,GAAG,IAAI,EAAE,GAAG,OAAO;aACtB;SACJ,CAAC,CAAC;QACH,IAAI,OAAO,EAAE;YACT,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;SAC5B;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,eAAuB;QACrC,IAAI,YAAY,GAAG,MAAM,2BAAY,CAAC,OAAO,CAAC;YAC1C,OAAO,EAAE,CAAC,eAAM,CAAC;YACjB,KAAK,EAAE;gBACH,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACpC,6BAA6B,EAAE,eAAe;aACjD;SACJ,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,EAAE;YACf,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QACjC,MAAM,YAAY,CAAC,OAAO,EAAE,CAAC;QAC7B,IAAI,MAAM,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;YAC5C,MAAM,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;SACzC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,cAAc;QAChB,IAAI,SAAS,GAAG,MAAM,2BAAY,CAAC,OAAO,CAAC;YACvC,KAAK,EAAE;gBACH,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;aACvC;SACJ,CAAC,CAAC;QACH,IAAI,SAAS,GAAG,CAAC,EAAE;YACf,IAAI,IAAI,GAAG,MAAM,eAAM,CAAC,OAAO,CAAC;gBAC5B,OAAO,EAAE,CAAC,2BAAY,CAAC;gBACvB,KAAK,EAAE,CAAC,WAAW,CAAC;gBACpB,KAAK,EAAE,IAAA,iBAAK,EAAC,IAAA,cAAE,EAAC,OAAO,EAAE,IAAA,eAAG,EAAC,iBAAiB,CAAC,CAAC,EAAE,GAAG,CAAC;aACzD,CAAC,CAAC;YACH,KAAK,IAAI,MAAM,IAAI,IAAI,EAAE;gBACrB,MAAM,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;aACzC;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,gBAAgB;QAClB,OAAO,2BAAY,CAAC,OAAO,CAAC;YACxB,OAAO,EAAE,CAAC,eAAM,CAAC;YACjB,KAAK,EAAE;gBACH,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;aACvC;SACJ,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,eAAuB;QACzC,OAAO,2BAAY,CAAC,OAAO,CAAC;YACxB,OAAO,EAAE,CAAC,eAAM,CAAC;YACjB,KAAK,EAAE;gBACH,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACpC,6BAA6B,EAAE,eAAe;aACjD;SACJ,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAAsB,EAAE,YAA0B,EAAE,KAAmB;QAChF,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE;YACjC,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,IAAI,GAAG,MAAM,KAAK,CAAC,qBAAqB,EAAE,CAAC;QAC/C,IAAI,IAAI,GAAG;YACP,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY;YAClC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;YACzB,GAAG,EAAE,KAAK,CAAC,GAAG;SACjB,CAAA;QACD,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACzD,IAAI,CAAC,UAAU,CAAC,GAAG,IAAA,eAAM,EAAC,IAAA,YAAM,EAAC,yBAAyB,CAAC,EAAE;gBACzD,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA,EAAE,CAAA,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;aAC7D,CAAC,CAAC;SACN;QACD,IAAI,KAAK,CAAC,OAAO,EAAE;YACf,IAAI,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;iBACnC,MAAM,CAAC,IAAA,YAAM,EAAC,uBAAuB,CAAC,CAAC;iBACvC,MAAM,CAAC,IAAA,YAAM,EAAC,2BAA2B,CAAC,CAAC,CAAC;SACpD;QACD,IAAI,YAAY,GAAG,IAAA,eAAM,EAAC,IAAA,YAAM,EAAC,kBAAkB,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAClE,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAED,IAAY,gBAKX;AALD,WAAY,gBAAgB;IACxB,mCAAe,CAAA;IACf,iCAAa,CAAA;IACb,6CAAyB,CAAA;IACzB,yCAAqB,CAAA;AACzB,CAAC,EALW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAK3B","file":"SubscriptionManager.js","sourcesContent":["import {Channel, ChannelResolvable, TextBasedChannels} from \"discord.js\";\nimport {bot} from \"../bot\";\nimport {Subscription} from \"../models/Subscription\";\nimport {WebSub} from \"../models/WebSub\";\nimport {col, fn, Op, where} from \"sequelize\";\nimport {catchLog} from \"../utils/catchLog\";\nimport {YoutubeVideo} from \"../models/YoutubeVideo\";\nimport {format, get as config} from \"../config\";\nimport {Notification} from \"../models/Notification\";\nimport {logger} from \"../logger\";\nimport {google} from \"googleapis\";\nimport cron = require(\"node-cron\");\nimport moment = require(\"moment\");\n\ninterface ChannelSubscribeOptions {\n    notify_video?: boolean;\n    notify_live?: boolean;\n    notify_reschedule?: boolean;\n    notify_starting?: boolean;\n}\n\nlet booted = false;\n\nexport module SubscriptionManager {\n    import Dict = NodeJS.Dict;\n\n    export async function get(channel: ChannelResolvable): Promise<ChannelSubscriptionManager> {\n        let ch = channel as Channel;\n        if (typeof channel === 'string') {\n            ch = bot.channels.resolve(channel);\n            if (!ch) {\n                ch = await bot.channels.fetch(channel);\n            }\n            if (!ch) {\n                return null;\n            }\n        }\n        if (ch.type !== 'DM' && ch.type !== 'GUILD_TEXT' && ch.type !== 'GUILD_NEWS') {\n            throw new TypeError('Channel is not text based.');\n        }\n        return new Manager(ch as TextBasedChannels);\n    }\n\n    export function boot() {\n        if (booted) return;\n        booted = true;\n        cron.schedule('* * * * *', catchLog(SubscriptionManager.checkNotification));\n        cron.schedule('*/5 * * * *', catchLog(SubscriptionManager.checkVideoUpdates));\n    }\n\n    export async function checkNotification() {\n        let notifications = await Notification.findAll({\n            include: [YoutubeVideo],\n            where: {\n                type: NotificationType.STARTING,\n                scheduled_at: {[Op.lte]: new Date()},\n                notified_at: null,\n            }\n        });\n        for(let notification of notifications){\n            try{\n                let video = notification.video;\n                let websub = await video.$get('subscription');\n                let subscriptions = await websub.get('subscriptions');\n                for(let sub of subscriptions){\n                    await sub.notify(notification.type, video);\n                }\n                notification.notified_at = new Date();\n                notification.save();\n            } catch (error){\n                logger.warn(error);\n            }\n        }\n    }\n\n    export async function checkVideoUpdates() {\n        let videos = await YoutubeVideo.findAll({\n            include: [Notification],\n            where: {\n                live_at: {[Op.gt]: new Date()},\n                '$notifications.notified_at$': null,\n            }\n        });\n        if(videos.length === 0){\n            return;\n        }\n        let ids = videos.map(v => v.video_id);\n        let dict: Dict<YoutubeVideo> = Object\n            .fromEntries(videos.map(v=>[v.video_id, v]));\n        let res = await google.youtube('v3').videos.list({\n            id: ids, part: ['id', 'liveStreamingDetails']\n        });\n        for(let schema of res.data.items){\n            if (\n                !schema.liveStreamingDetails ||\n                !schema.liveStreamingDetails.scheduledStartTime ||\n                schema.liveStreamingDetails.actualStartTime\n            ) {\n                continue;\n            }\n            let newLive = moment(schema.liveStreamingDetails.scheduledStartTime);\n            let video = dict[schema.id];\n            if (!newLive.isSame(video.live_at)) {\n                video.live_at = newLive.toDate();\n                video.save();\n                let notifications = await Notification.findAll({\n                    where: {\n                        video_id: schema.id,\n                        type: NotificationType.STARTING,\n                    }\n                });\n                let schedule = newLive.subtract({minute: 5}).startOf('minute').toDate();\n                for (let notification of notifications) {\n                    notification.scheduled_at = schedule;\n                    notification.notified_at = null;\n                    await notification.save();\n                }\n                let websub = await video.$get('subscription');\n                let subs = await websub.$get('subscriptions');\n                for (let sub of subs) {\n                    await sub.notify(NotificationType.RESCHEDULE, video);\n                }\n                await Notification.create({\n                    type: NotificationType.RESCHEDULE,\n                    video_id: schema.id,\n                    scheduled_at: new Date()\n                });\n            }\n        }\n    }\n}\n\nexport interface ChannelSubscriptionManager {\n    getChannel(): TextBasedChannels;\n    hasSubscription(youtube_channel: string): Promise<boolean>;\n    subscribe(youtube_channel: string, options?: ChannelSubscribeOptions): Promise<boolean>;\n    unsubscribe(youtube_channel: string): Promise<boolean>;\n    unsubscribeAll(): Promise<number>;\n    listSubscription(): Promise<Subscription[]>;\n    getSubscription(youtube_channel: string): Promise<Subscription>;\n    notify(type: NotificationType, subscription: Subscription, video: YoutubeVideo): Promise<boolean>;\n}\n\nclass Manager implements ChannelSubscriptionManager {\n    protected _channel: TextBasedChannels;\n\n    constructor(channel: TextBasedChannels) {\n        this._channel = channel;\n    }\n\n    getChannel(){\n        return this._channel;\n    }\n\n    async hasSubscription(youtube_channel: string): Promise<boolean> {\n        return await Subscription.count({\n            include: [WebSub],\n            where: {\n                discord_channel_id: this._channel.id,\n                '$websub.youtube_channel_id$': youtube_channel,\n            }\n        }) > 0;\n    }\n\n    async subscribe(youtube_channel: string, options?: ChannelSubscribeOptions): Promise<boolean> {\n        let data: any = {\n            youtube_channel_id: youtube_channel\n        };\n        let [websub, created] = await WebSub.findOrCreate({\n            where: data,\n            defaults: data,\n        });\n        data = {\n            websub_id: websub.id,\n            discord_channel_id: this._channel.id,\n        }\n        if (this._channel.type !== 'DM') {\n            data.discord_guild_id = this._channel.guildId;\n        }\n        let [_, newSub] = await Subscription.findOrCreate({\n            where: data,\n            defaults: {\n                ...data, ...options\n            },\n        });\n        if (created) {\n            await websub.subscribe();\n        }\n        return newSub;\n    }\n\n    async unsubscribe(youtube_channel: string): Promise<boolean> {\n        let subscription = await Subscription.findOne({\n            include: [WebSub],\n            where: {\n                discord_channel_id: this._channel.id,\n                '$websub.youtube_channel_id$': youtube_channel,\n            }\n        });\n        if (!subscription) {\n            return false;\n        }\n        let websub = subscription.websub;\n        await subscription.destroy();\n        if (await websub.$count('subscriptions') === 0) {\n            await websub.subscribe('unsubscribe');\n        }\n        return true;\n    }\n\n    async unsubscribeAll(): Promise<number> {\n        let destroyed = await Subscription.destroy({\n            where: {\n                discord_channel_id: this._channel.id,\n            }\n        });\n        if (destroyed > 0) {\n            let subs = await WebSub.findAll({\n                include: [Subscription],\n                group: ['websub.id'],\n                where: where(fn('COUNT', col('subscription.id')), '0')\n            });\n            for (let websub of subs) {\n                await websub.subscribe('unsubscribe');\n            }\n        }\n        return destroyed;\n    }\n\n    async listSubscription(): Promise<Subscription[]> {\n        return Subscription.findAll({\n            include: [WebSub],\n            where: {\n                discord_channel_id: this._channel.id,\n            }\n        });\n    }\n\n    async getSubscription(youtube_channel: string): Promise<Subscription> {\n        return Subscription.findOne({\n            include: [WebSub],\n            where: {\n                discord_channel_id: this._channel.id,\n                '$websub.youtube_channel_id$': youtube_channel,\n            }\n        });\n    }\n\n    async notify(type: NotificationType, subscription: Subscription, video: YoutubeVideo): Promise<boolean> {\n        if (!subscription[\"notify_\" + type]) {\n            return false;\n        }\n        let meta = await video.fetchYoutubeVideoMeta();\n        let data = {\n            channel: meta.snippet.channelTitle,\n            title: meta.snippet.title,\n            url: video.url,\n        }\n        if (subscription.mention && subscription.mention.length > 0) {\n            data['mentions'] = format(config('$.notification.mentions'), {\n                mentions: subscription.mention.map(m=>`<@!${m}>`).join('')\n            });\n        }\n        if (video.live_at) {\n            data['schedule'] = moment(video.live_at)\n                .locale(config('$.notification.locale'))\n                .format(config('$.notification.timeFormat'));\n        }\n        let notification = format(config(`$.notification.${type}`), data);\n        await this._channel.send(notification);\n        return true;\n    }\n}\n\nexport enum NotificationType {\n    VIDEO = 'video',\n    LIVE = 'live',\n    RESCHEDULE = 'reschedule',\n    STARTING = 'starting',\n}\n"]}
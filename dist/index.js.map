{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,+BAAuC;AACvC,qCAAgC;AAChC,wDAAmD;AACnD,wDAAmD;AACnD,4CAAuC;AACvC,wDAAmD;AACnD,6CAAwC;AACxC,2CAAkC;AAClC,+BAA0B;AAC1B,yCAA6B;AAC7B,oDAA+C;AAC/C,mCAA8B;AAC9B,kCAAmC;AACnC,iCAAkC;AAClC,iCAAkC;AAElC,eAAG,CAAC,SAAS,CAAC;IACV,2BAAY;IACZ,2BAAY;IACZ,eAAM;IACN,2BAAY;IACZ,uBAAU;CACb,CAAC,CAAC;AAEH,CAAC,KAAK,IAAI,EAAE;IAER,IAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,EAAC;QACrB,KAAI,IAAI,EAAE,IAAI,MAAM,CAAC,GAAG,CAAgC,SAAS,CAAC,EAAC;YAC/D,eAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;SAC3B;KACJ;IAED,IAAI,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;QAC7B,MAAM,eAAG,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAC5C,eAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC7B;IAED,MAAM,aAAK,CAAC,OAAO,EAAE,CAAC;IACtB,eAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAEhC,mBAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,EAAC,CAAC,CAAC;IAElD,eAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE;QACrE,eAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,IAAI,WAAW,GAAG,GAAG,EAAE;QACnB,eAAM,CAAC,OAAO,CAAC;YACX,KAAK,EAAE;gBACH,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE;oBACL,EAAC,UAAU,EAAE,IAAI,EAAC;oBAClB,EAAC,UAAU,EAAE,EAAC,CAAC,cAAE,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,EAAC,IAAI,EAAE,CAAC,EAAC,CAAC,CAAC,MAAM,EAAE,EAAC,EAAC;iBAC7D;aACJ;SACJ,CAAC,CAAC,IAAI,CAAC,KAAK,EAAC,IAAI,EAAC,EAAE;YACjB,KAAK,IAAI,MAAM,IAAI,IAAI,EAAE;gBACrB,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;aAC5B;QACL,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEF,8BAA8B;IAC9B,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAC1C,MAAM,WAAW,EAAE,CAAC;IAEpB,MAAM,SAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;IACX,eAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC","file":"index.js","sourcesContent":["import {sequelize as sql} from \"./sql\";\nimport {logger} from \"./logger\";\nimport {Notification} from \"./models/Notification\";\nimport {Subscription} from \"./models/Subscription\";\nimport {WebSub} from \"./models/WebSub\";\nimport {YoutubeVideo} from \"./models/YoutubeVideo\";\nimport {server} from \"./express/server\";\nimport {google} from \"googleapis\";\nimport {bot} from \"./bot\";\nimport {Op} from \"sequelize\";\nimport {CommandMap} from \"./models/CommandMap\";\nimport {redis} from \"./redis\";\nimport cron = require('node-cron');\nimport moment = require(\"moment\");\nimport config = require(\"config\");\n\nsql.addModels([\n    Notification,\n    Subscription,\n    WebSub,\n    YoutubeVideo,\n    CommandMap,\n]);\n\n(async () => {\n\n    if(config.has('logging')){\n        for(let fn of config.get<((level, record, raw)=>any)[]>('logging')){\n            logger.on('record', fn);\n        }\n    }\n\n    if (config.get('database.sync')) {\n        await sql.sync({alter: true, force: false});\n        logger.info(\"DB synced.\");\n    }\n\n    await redis.connect();\n    logger.info('Redis connected.');\n\n    google.options({auth: config.get('youtube.key')});\n\n    server.listen(config.get('websub.port'), config.get('websub.host'), () => {\n        logger.info('Websub listener ready.');\n    });\n\n    let checkWebSub = () => {\n        WebSub.findAll({\n            where: {\n                [Op.or]: [\n                    {expires_at: null},\n                    {expires_at: {[Op.lte]: moment().add({hour: 1}).toDate()}}\n                ]\n            }\n        }).then(async subs => {\n            for (let websub of subs) {\n                await websub.subscribe();\n            }\n        }).catch(error => logger.error(error));\n    };\n\n    // Setup cron for renew websub\n    cron.schedule('*/5 * * * *', checkWebSub);\n    await checkWebSub();\n\n    await bot.login(config.get('discord.token'));\n})().catch(e => {\n    logger.error(e);\n    process.exitCode = 1;\n});\n"]}
{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AACnC,+BAAuC;AACvC,qCAAgC;AAChC,wDAAmD;AACnD,wDAAmD;AACnD,4CAAuC;AACvC,wDAAmD;AACnD,6CAAwC;AACxC,2CAAkC;AAClC,+BAA0B;AAC1B,yCAA6B;AAC7B,kCAAmC;AACnC,iCAAkC;AAElC,eAAG,CAAC,SAAS,CAAC;IACV,2BAAY;IACZ,2BAAY;IACZ,eAAM;IACN,2BAAY;CACf,CAAC,CAAC;AAEH,CAAC,KAAK,IAAI,EAAE;IACR,IAAI,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE;QAClC,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,sCAAsC,CAAC,CAAC;QAC1D,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;QAC/D,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC;QAC3D,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QAC9C,eAAM,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;QACnE,eAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC/B;IAED,IAAI,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;QAC7B,MAAM,eAAG,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;QAC9B,eAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC7B;IAED,mBAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,EAAC,CAAC,CAAC;IAElD,eAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,EAAE,GAAG,EAAE;QACrE,eAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,8BAA8B;IAC9B,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC9B,eAAM,CAAC,OAAO,CAAC;YACX,KAAK,EAAE;gBACH,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE;oBACL,EAAC,UAAU,EAAE,IAAI,EAAC;oBAClB,EAAC,UAAU,EAAE,EAAC,CAAC,cAAE,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,EAAC,IAAI,EAAE,CAAC,EAAC,CAAC,CAAC,MAAM,EAAE,EAAC,EAAC;iBAC7D;aACJ;SACJ,CAAC,CAAC,IAAI,CAAC,KAAK,EAAC,IAAI,EAAC,EAAE;YACjB,KAAK,IAAI,MAAM,IAAI,IAAI,EAAE;gBACrB,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;aAC5B;QACL,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,MAAM,SAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;IACX,eAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC","file":"index.js","sourcesContent":["import * as config from './config';\nimport {sequelize as sql} from \"./sql\";\nimport {logger} from \"./logger\";\nimport {Notification} from \"./models/Notification\";\nimport {Subscription} from \"./models/Subscription\";\nimport {WebSub} from \"./models/WebSub\";\nimport {YoutubeVideo} from \"./models/YoutubeVideo\";\nimport {server} from \"./express/server\";\nimport {google} from \"googleapis\";\nimport {bot} from \"./bot\";\nimport {Op} from \"sequelize\";\nimport cron = require('node-cron');\nimport moment = require(\"moment\");\n\nsql.addModels([\n    Notification,\n    Subscription,\n    WebSub,\n    YoutubeVideo,\n]);\n\n(async () => {\n    if (config.get('discord.inviteLink')) {\n        let url = new URL('https://discord.com/oauth2/authorize');\n        url.searchParams.set('client_id', config.get('discord.appId'));\n        url.searchParams.set('scope', 'bot applications.commands');\n        url.searchParams.set('permissions', '224256');\n        logger.info('Use the following link to add this bot into server.');\n        logger.info(url.toString());\n    }\n\n    if (config.get('database.sync')) {\n        await sql.sync({alter: true});\n        logger.info(\"DB synced.\");\n    }\n\n    google.options({auth: config.get('youtube.key')});\n\n    server.listen(config.get('websub.port', config.get('websub.host')), () => {\n        logger.info('Websub listener ready.');\n    });\n\n    // Setup cron for renew websub\n    cron.schedule('*/5 * * * *', () => {\n        WebSub.findAll({\n            where: {\n                [Op.or]: [\n                    {expires_at: null},\n                    {expires_at: {[Op.lte]: moment().add({hour: 1}).toDate()}}\n                ]\n            }\n        }).then(async subs => {\n            for (let websub of subs) {\n                await websub.subscribe();\n            }\n        }).catch(error => logger.error(error));\n    });\n\n    await bot.login(config.get('discord.token'));\n})().catch(e => {\n    logger.error(e);\n    process.exit(1);\n});\n"]}
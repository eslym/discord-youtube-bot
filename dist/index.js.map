{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AACnC,+BAAuC;AACvC,qCAAgC;AAChC,wDAAmD;AACnD,wDAAmD;AACnD,4CAAuC;AACvC,wDAAmD;AACnD,6CAAwC;AACxC,2CAAkC;AAClC,+BAA0B;AAC1B,yCAA6B;AAC7B,oDAA+C;AAC/C,mCAA8B;AAC9B,kCAAmC;AACnC,iCAAkC;AAElC,eAAG,CAAC,SAAS,CAAC;IACV,2BAAY;IACZ,2BAAY;IACZ,eAAM;IACN,2BAAY;IACZ,uBAAU;CACb,CAAC,CAAC;AAEH,CAAC,KAAK,IAAI,EAAE;IACR,IAAI,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;QAC7B,MAAM,eAAG,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAC5C,eAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC7B;IAED,MAAM,aAAK,CAAC,OAAO,EAAE,CAAC;IACtB,eAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAEhC,mBAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,EAAC,CAAC,CAAC;IAElD,eAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,EAAE,GAAG,EAAE;QACrE,eAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,IAAI,WAAW,GAAG,GAAG,EAAE;QACnB,eAAM,CAAC,OAAO,CAAC;YACX,KAAK,EAAE;gBACH,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE;oBACL,EAAC,UAAU,EAAE,IAAI,EAAC;oBAClB,EAAC,UAAU,EAAE,EAAC,CAAC,cAAE,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,EAAC,IAAI,EAAE,CAAC,EAAC,CAAC,CAAC,MAAM,EAAE,EAAC,EAAC;iBAC7D;aACJ;SACJ,CAAC,CAAC,IAAI,CAAC,KAAK,EAAC,IAAI,EAAC,EAAE;YACjB,KAAK,IAAI,MAAM,IAAI,IAAI,EAAE;gBACrB,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;aAC5B;QACL,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEF,8BAA8B;IAC9B,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAC1C,MAAM,WAAW,EAAE,CAAC;IAEpB,MAAM,SAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;IACX,eAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC","file":"index.js","sourcesContent":["import * as config from './config';\r\nimport {sequelize as sql} from \"./sql\";\r\nimport {logger} from \"./logger\";\r\nimport {Notification} from \"./models/Notification\";\r\nimport {Subscription} from \"./models/Subscription\";\r\nimport {WebSub} from \"./models/WebSub\";\r\nimport {YoutubeVideo} from \"./models/YoutubeVideo\";\r\nimport {server} from \"./express/server\";\r\nimport {google} from \"googleapis\";\r\nimport {bot} from \"./bot\";\r\nimport {Op} from \"sequelize\";\r\nimport {CommandMap} from \"./models/CommandMap\";\r\nimport {redis} from \"./redis\";\r\nimport cron = require('node-cron');\r\nimport moment = require(\"moment\");\r\n\r\nsql.addModels([\r\n    Notification,\r\n    Subscription,\r\n    WebSub,\r\n    YoutubeVideo,\r\n    CommandMap,\r\n]);\r\n\r\n(async () => {\r\n    if (config.get('database.sync')) {\r\n        await sql.sync({alter: true, force: false});\r\n        logger.info(\"DB synced.\");\r\n    }\r\n\r\n    await redis.connect();\r\n    logger.info('Redis connected.');\r\n\r\n    google.options({auth: config.get('youtube.key')});\r\n\r\n    server.listen(config.get('websub.port', config.get('websub.host')), () => {\r\n        logger.info('Websub listener ready.');\r\n    });\r\n\r\n    let checkWebSub = () => {\r\n        WebSub.findAll({\r\n            where: {\r\n                [Op.or]: [\r\n                    {expires_at: null},\r\n                    {expires_at: {[Op.lte]: moment().add({hour: 1}).toDate()}}\r\n                ]\r\n            }\r\n        }).then(async subs => {\r\n            for (let websub of subs) {\r\n                await websub.subscribe();\r\n            }\r\n        }).catch(error => logger.error(error));\r\n    };\r\n\r\n    // Setup cron for renew websub\r\n    cron.schedule('*/5 * * * *', checkWebSub);\r\n    await checkWebSub();\r\n\r\n    await bot.login(config.get('discord.token'));\r\n})().catch(e => {\r\n    logger.error(e);\r\n    process.exit(1);\r\n});\r\n"]}
{"version":3,"sources":["../src/express/middleware.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,mCAAsD;AAEtD,SAAsB,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;;QACrE,IAAG,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,EAAC;YACb,IAAI;gBACA,GAAG,CAAC,IAAI,GAAG,MAAM,IAAA,2BAAQ,EAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;aACjD;YAAC,OAAO,CAAC,EAAE;gBACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;qBACjB,IAAI,CAAC;oBACF,OAAO,EAAE,KAAK;oBACd,IAAI,EAAE,GAAG;oBACT,KAAK,EAAE,aAAa;oBACpB,OAAO,EAAE,0BAA0B;iBACtC,CAAC,CAAC;aACV;SACJ;QACD,IAAI,EAAE,CAAC;IACX,CAAC;CAAA;AAfD,kBAeC;AAED,SAAgB,IAAI,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IAChE,IAAG,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,EAAC;QACd,IAAI;YACA,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1C,IAAI,EAAE,CAAC;SACV;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;iBACjB,IAAI,CAAC;gBACF,OAAO,EAAE,KAAK;gBACd,IAAI,EAAE,GAAG;gBACT,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,0BAA0B;aACtC,CAAC,CAAC;SACV;KACJ;IACD,IAAI,EAAE,CAAC;AACX,CAAC;AAhBD,oBAgBC;AAED,SAAgB,IAAI,CAAC,GAAG,KAAe;IACnC,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACvD,IAAG,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,EAAC;YACb,IAAI,EAAE,CAAC;SACV;aAAM;YACH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;iBACV,IAAI,CAAC;gBACF,OAAO,EAAE,KAAK;gBACd,IAAI,EAAE,GAAG;gBACT,KAAK,EAAE,yBAAyB;gBAChC,OAAO,EAAE,0BAA0B;aACtC,CAAC,CAAC;SACV;IACL,CAAC,CAAA;AACL,CAAC;AAdD,oBAcC","file":"middleware.js","sourcesContent":["import {NextFunction, Request, Response} from \"express\";\nimport {parseStringPromise as parsexml} from \"xml2js\";\n\nexport async function xml(req: Request, res: Response, next: NextFunction) {\n    if(req.is('xml')){\n        try {\n            req.body = await parsexml(req.raw.toString());\n        } catch (_) {\n            return res.status(422)\n                .json({\n                    success: false,\n                    code: 422,\n                    error: 'invalid_xml',\n                    message: '422 Unprocessable Entity',\n                });\n        }\n    }\n    next();\n}\n\nexport function json(req: Request, res: Response, next: NextFunction) {\n    if(req.is('json')){\n        try {\n            req.body = JSON.parse(req.raw.toString());\n            next();\n        } catch (_) {\n            return res.status(422)\n                .json({\n                    success: false,\n                    code: 422,\n                    error: 'invalid_json',\n                    message: '422 Unprocessable Entity',\n                });\n        }\n    }\n    next();\n}\n\nexport function need(...types: string[]){\n    return (req: Request, res: Response, next: NextFunction) => {\n        if(req.is(types)){\n            next();\n        } else {\n            res.status(422)\n                .json({\n                    success: false,\n                    code: 422,\n                    error: 'unexpected_content_type',\n                    message: '422 Unprocessable Entity',\n                });\n        }\n    }\n}\n"]}
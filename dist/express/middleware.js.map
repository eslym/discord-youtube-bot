{"version":3,"sources":["../src/express/middleware.ts"],"names":[],"mappings":";;;AACA,mCAAsD;AAE/C,KAAK,UAAU,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IACrE,IAAI,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;QACf,IAAI;YACA,GAAG,CAAC,IAAI,GAAG,MAAM,IAAA,2BAAQ,EAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;SACjD;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;iBACjB,IAAI,CAAC;gBACF,OAAO,EAAE,KAAK;gBACd,IAAI,EAAE,GAAG;gBACT,KAAK,EAAE,aAAa;gBACpB,OAAO,EAAE,0BAA0B;aACtC,CAAC,CAAC;SACV;KACJ;IACD,IAAI,EAAE,CAAC;AACX,CAAC;AAfD,kBAeC;AAED,SAAgB,IAAI,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IAChE,IAAI,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;QAChB,IAAI;YACA,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1C,IAAI,EAAE,CAAC;SACV;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;iBACjB,IAAI,CAAC;gBACF,OAAO,EAAE,KAAK;gBACd,IAAI,EAAE,GAAG;gBACT,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,0BAA0B;aACtC,CAAC,CAAC;SACV;KACJ;IACD,IAAI,EAAE,CAAC;AACX,CAAC;AAhBD,oBAgBC;AAED,SAAgB,IAAI,CAAC,GAAG,KAAe;IACnC,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACvD,IAAI,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;YACf,IAAI,EAAE,CAAC;SACV;aAAM;YACH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;iBACV,IAAI,CAAC;gBACF,OAAO,EAAE,KAAK;gBACd,IAAI,EAAE,GAAG;gBACT,KAAK,EAAE,yBAAyB;gBAChC,OAAO,EAAE,0BAA0B;aACtC,CAAC,CAAC;SACV;IACL,CAAC,CAAA;AACL,CAAC;AAdD,oBAcC","file":"middleware.js","sourcesContent":["import {NextFunction, Request, Response} from \"express\";\r\nimport {parseStringPromise as parsexml} from \"xml2js\";\r\n\r\nexport async function xml(req: Request, res: Response, next: NextFunction) {\r\n    if (req.is('xml')) {\r\n        try {\r\n            req.body = await parsexml(req.raw.toString());\r\n        } catch (_) {\r\n            return res.status(422)\r\n                .json({\r\n                    success: false,\r\n                    code: 422,\r\n                    error: 'invalid_xml',\r\n                    message: '422 Unprocessable Entity',\r\n                });\r\n        }\r\n    }\r\n    next();\r\n}\r\n\r\nexport function json(req: Request, res: Response, next: NextFunction) {\r\n    if (req.is('json')) {\r\n        try {\r\n            req.body = JSON.parse(req.raw.toString());\r\n            next();\r\n        } catch (_) {\r\n            return res.status(422)\r\n                .json({\r\n                    success: false,\r\n                    code: 422,\r\n                    error: 'invalid_json',\r\n                    message: '422 Unprocessable Entity',\r\n                });\r\n        }\r\n    }\r\n    next();\r\n}\r\n\r\nexport function need(...types: string[]) {\r\n    return (req: Request, res: Response, next: NextFunction) => {\r\n        if (req.is(types)) {\r\n            next();\r\n        } else {\r\n            res.status(422)\r\n                .json({\r\n                    success: false,\r\n                    code: 422,\r\n                    error: 'unexpected_content_type',\r\n                    message: '422 Unprocessable Entity',\r\n                });\r\n        }\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../src/express/server.ts"],"names":[],"mappings":";;;AAAA,qCAAwC;AACxC,mCAAmC;AACnC,wCAAyC;AACzC,2CAA2C;AAC3C,iEAAwD;AACxD,qEAAgE;AAChE,8DAAyD;AAU5C,QAAA,MAAM,GAAG,OAAO,EAAE,CAAC;AAChC,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE;IACxB,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,EAAE,CAAC,GAAG,EAAE,EAAE;QAC1C,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;QACd,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC,CAAA;AACP,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;AAE5C,SAAS,QAAQ,CAAC,GAAG,EAAE,GAAG;IACtB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;SACV,IAAI,CAAC;QACF,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,GAAG;QACT,KAAK,EAAE,WAAW;QAClB,OAAO,EAAE,eAAe;KAC3B,CAAC,CAAC;AACX,CAAC;AAED,cAAM,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AAElC,cAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAoB,EAAE,GAAqB,EAAE,CAAuB,EAAE,EAAE;IACrF,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE;QAClB,IAAI,IAAI,GAAQ;YACZ,OAAO,EAAE,KAAK;YACd,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,2BAA2B;SACvC,CAAC;QACF,IAAI,GAAG,YAAY,6BAAa,EAAE;YAC9B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAA;YACtB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAA;SAC7B;aAAM;YACH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACtB;QACD,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,MAAM,EAAE;YAC9B,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;SACxB;QACD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAA,2BAAU,EAAC,mCAAgB,CAAC,CAAC,SAAS,CAAC,CAAC;AAEtE,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAA,2BAAU,EAAC,mCAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC","file":"server.js","sourcesContent":["import {Express, Router} from \"express\";\nimport * as express from \"express\";\nimport concat = require(\"concat-stream\");\nimport * as middleware from \"./middleware\";\nimport {controller} from \"./controllers/BaseController\";\nimport {WebSubController} from \"./controllers/WebSubController\";\nimport {HttpException} from \"./exceptions/HttpException\";\n\ndeclare global {\n    namespace Express {\n        interface Request {\n            raw?: Buffer;\n        }\n    }\n}\n\nexport const server = express();\nconst router = Router();\n\nrouter.use((req, _, next) => {\n    req.pipe(concat({encoding: 'buffer'}, (buf) => {\n        req.raw = buf;\n        next();\n    }))\n});\n\nrouter.use(middleware.json, middleware.xml);\n\nfunction notFound(req, res) {\n    res.status(404)\n        .json({\n            success: false,\n            code: 404,\n            error: 'not_found',\n            message: '404 Not Found',\n        });\n}\n\nserver.use('/', router, notFound);\n\nserver.use((err, req: express.Request, res: express.Response, _: express.NextFunction) => {\n    if (!res.headersSent) {\n        let body: any = {\n            success: false,\n            code: 500,\n            message: '500 Internal Server Error',\n        };\n        if (err instanceof HttpException) {\n            body.code = err.status\n            body.message = err.message\n        } else {\n            console.error(err);\n        }\n        if (process.env.DEBUG === 'true') {\n            body.exception = err;\n        }\n        res.status(body.code).json(body);\n    }\n});\n\nrouter.get('/websub/:websub', controller(WebSubController).subscribe);\n\nrouter.post('/websub/:websub', controller(WebSubController).callback);\n"]}
{"version":3,"sources":["../src/express/controllers/WebSubController.ts"],"names":[],"mappings":"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","file":"WebSubController.js","sourcesContent":["import {BaseController} from \"./BaseController\";\r\nimport {parseStringPromise} from \"xml2js\";\r\nimport * as moment from \"moment\";\r\nimport {logger} from \"../../logger\";\r\nimport {WebSub} from \"../../models/WebSub\";\r\nimport {Subscription} from \"../../models/Subscription\";\r\nimport {Notification} from \"../../models/Notification\";\r\nimport {Op} from \"sequelize\";\r\nimport {YoutubeVideo} from \"../../models/YoutubeVideo\";\r\nimport {NotificationType} from \"../../manager/SubscriptionManager\";\r\nimport {youtube_v3} from \"googleapis\";\r\nimport crypto = require(\"crypto\");\r\nimport Schema$Video = youtube_v3.Schema$Video;\r\n\r\nexport class WebSubController extends BaseController {\r\n    async subscribe() {\r\n        let websub: WebSub = await this.resolveParam<Promise<WebSub>>('websub', (id) => WebSub.findByPk(id), true);\r\n        this.response.send(this.request.query['hub.challenge']);\r\n        let data = await websub.fetchYoutubeChannelMeta();\r\n        let title = data.snippet.title;\r\n        if (this.request.query['hub.mode'] === 'subscribe') {\r\n            if (websub.expires_at === null) {\r\n                logger.info(`[WebSub] Subscribed ${title}`);\r\n            } else {\r\n                logger.info(`[WebSub] Renewed ${title}`);\r\n            }\r\n            websub.expires_at = moment()\r\n                .add({second: Number.parseInt(this.request.query['hub.lease_seconds'] as string)})\r\n                .toDate();\r\n            websub.save();\r\n        } else if (this.request.query['hub.mode'] === 'unsubscribe') {\r\n            logger.info(`[WebSub] Unsubscribed ${title}`);\r\n            let videos = await YoutubeVideo.findAll({\r\n                attributes: ['video_id'],\r\n                where: {\r\n                    websub_id: websub.id\r\n                }\r\n            }).map(v => v.video_id);\r\n            await Notification.destroy({\r\n                where: {\r\n                    video_id: {[Op.in]: videos}\r\n                }\r\n            });\r\n            await YoutubeVideo.destroy({\r\n                where: {\r\n                    video_id: {[Op.in]: videos}\r\n                }\r\n            });\r\n            let ids = await Subscription.findAll({\r\n                attributes: ['id'],\r\n                where: {\r\n                    websub_id: websub.id,\r\n                }\r\n            }).map(s => s.id);\r\n            await Subscription.destroy({\r\n                where: {\r\n                    id: {[Op.in]: ids}\r\n                }\r\n            })\r\n            await websub.destroy();\r\n        }\r\n    }\r\n\r\n    async callback() {\r\n        let websub: WebSub = await this.resolveParam<Promise<WebSub>>('websub', (id) => WebSub.findByPk(id), true);\r\n        this.response.send('OK');\r\n        this.request.body = await parseStringPromise(this.request.raw.toString());\r\n        let [algo, sig] = (this.request.headers['x-hub-signature'] as string).split('=', 2);\r\n        let hmac = crypto.createHmac(algo, websub.secret);\r\n        hmac.update(this.request.raw);\r\n        let compute = hmac.digest().toString('hex');\r\n        if (sig.toLowerCase() !== compute) {\r\n            logger.warn(`[WebSub] Invalid signature ${sig}`)\r\n            return;\r\n        }\r\n        let data = await websub.fetchYoutubeChannelMeta();\r\n        let title = data.snippet.title;\r\n        logger.info(`[WebSub] Notification received from ${title}`);\r\n        if (this.request.body.feed['at:deleted-entry'] !== undefined) {\r\n            let entry = this.request.body.feed['at:deleted-entry'][0];\r\n            let id = (entry.$.ref as string).split(':').pop();\r\n            let video = await YoutubeVideo.findOne({\r\n                where: {\r\n                    video_id: id,\r\n                }\r\n            });\r\n            if (video) {\r\n                video.deleted_at = moment(entry.$.when).toDate();\r\n                await video.save();\r\n                await Notification.destroy({\r\n                    where: {\r\n                        video_id: id,\r\n                    }\r\n                });\r\n                logger.info(`Video deleted: ${id}`);\r\n            }\r\n        } else {\r\n            for (let video of this.request.body.feed.entry) {\r\n                let id = video['yt:videoId'][0] as string;\r\n                let ytVideo = await YoutubeVideo.findByPk(id);\r\n                logger.info(`[WebSub] Video: ${id}`);\r\n                if (!ytVideo) {\r\n                    ytVideo = await YoutubeVideo.create({\r\n                        video_id: id,\r\n                        websub_id: websub.id,\r\n                    });\r\n                    let videoSnippet: Schema$Video;\r\n                    try {\r\n                        videoSnippet = await ytVideo.fetchYoutubeVideoMeta();\r\n                    } catch (_) {\r\n                        continue;\r\n                    }\r\n                    if (videoSnippet.liveStreamingDetails) {\r\n                        if (!videoSnippet.liveStreamingDetails.actualStartTime) {\r\n                            if (!videoSnippet.liveStreamingDetails.scheduledStartTime) {\r\n                                continue;\r\n                            }\r\n                            let schedule = moment(videoSnippet.liveStreamingDetails.scheduledStartTime);\r\n                            ytVideo.live_at = schedule.toDate();\r\n                            ytVideo.save();\r\n                            schedule = schedule.subtract({minute: 5}).startOf('minute');\r\n                            for (let sub of await websub.$get('subscriptions')) {\r\n                                await sub.notify(NotificationType.LIVE, ytVideo);\r\n                                await Notification.create({\r\n                                    type: NotificationType.STARTING,\r\n                                    video_id: id,\r\n                                    scheduled_at: schedule.toDate()\r\n                                });\r\n                            }\r\n                            await Notification.create({\r\n                                type: NotificationType.LIVE,\r\n                                video_id: id,\r\n                                scheduled_at: new Date(),\r\n                                notified_at: new Date(),\r\n                            });\r\n                            continue;\r\n                        }\r\n                    }\r\n                    for (let sub of await websub.$get('subscriptions')) {\r\n                        await sub.notify(NotificationType.VIDEO, ytVideo);\r\n                    }\r\n                    await Notification.create({\r\n                        type: NotificationType.VIDEO,\r\n                        video_id: id,\r\n                        scheduled_at: new Date(),\r\n                        notified_at: new Date(),\r\n                    });\r\n                    continue;\r\n                }\r\n                if (ytVideo.deleted_at) {\r\n                    continue;\r\n                }\r\n                let videoSnippet = await ytVideo.fetchYoutubeVideoMeta();\r\n                if (!videoSnippet) {\r\n                    continue;\r\n                }\r\n                if (\r\n                    !videoSnippet.liveStreamingDetails ||\r\n                    !videoSnippet.liveStreamingDetails.scheduledStartTime ||\r\n                    videoSnippet.liveStreamingDetails.actualStartTime\r\n                ) {\r\n                    continue;\r\n                }\r\n                let newLive = moment(videoSnippet.liveStreamingDetails.scheduledStartTime);\r\n                if (!newLive.isSame(ytVideo.live_at)) {\r\n                    ytVideo.live_at = newLive.toDate();\r\n                    ytVideo.save();\r\n                    let notifications = await Notification.findAll({\r\n                        where: {\r\n                            video_id: id,\r\n                            type: NotificationType.STARTING,\r\n                        }\r\n                    });\r\n                    let schedule = newLive.subtract({minute: 5}).startOf('minute').toDate();\r\n                    for (let notification of notifications) {\r\n                        notification.scheduled_at = schedule;\r\n                        notification.notified_at = null;\r\n                        await notification.save();\r\n                    }\r\n                    let subs = await websub.$get('subscriptions');\r\n                    for (let sub of subs) {\r\n                        await sub.notify(NotificationType.RESCHEDULE, ytVideo);\r\n                    }\r\n                    await Notification.create({\r\n                        type: NotificationType.RESCHEDULE,\r\n                        video_id: id,\r\n                        scheduled_at: new Date(),\r\n                        notified_at: new Date(),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]}
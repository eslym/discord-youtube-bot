{"version":3,"sources":["../src/config.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,mCAAmC;AACnC,yBAAyB;AACzB,+BAA+B;AAE/B,SAAS,KAAK,CAAC,MAAW,EAAE,MAAW;IACnC,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACjC,IAAI,MAAM,CAAC,GAAG,CAAC,YAAY,MAAM,EAAE;YAC/B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAC/D;KACJ;IACD,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;IACpC,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,MAAM,cAAc,GAAG,IAAA,kBAAU,EAAC,YAAY,CAAC,CAAC;AAChD,IAAI,MAAM,GAAW,EAAE,CAAC;AAExB,SAAgB,MAAM;IAClB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACnF,IAAI,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE;QAC/B,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KACxF;AACL,CAAC;AALD,wBAKC;AAED,SAAgB,GAAG,CAAC,OAAe,GAAG,EAAE,MAAW,SAAS;IACxD,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACjC,IAAI,GAAG,YAAY,KAAK,EAAE;QACtB,QAAQ,GAAG,CAAC,MAAM,EAAE;YAChB,KAAK,CAAC;gBACF,OAAO,GAAG,CAAC;YACf,KAAK,CAAC;gBACF,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/C;gBACI,OAAO,GAAG,CAAC;SAClB;KACJ;IACD,OAAO,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;AACzC,CAAC;AAbD,kBAaC;AAED,SAAgB,MAAM,CAAC,QAAgB,EAAE,IAAY;IACjD,OAAO,QAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AACvE,CAAC;AAFD,wBAEC;AAED,MAAM,EAAE,CAAC","file":"config.js","sourcesContent":["import * as YAML from 'yaml';\r\nimport {configPath} from './paths';\r\nimport * as fs from 'fs';\r\nimport * as jp from 'jsonpath';\r\n\r\nfunction merge(target: any, source: any) {\r\n    for (let key of Object.keys(source)) {\r\n        if (source[key] instanceof Object) {\r\n            Object.assign(source[key], merge(target[key], source[key]));\r\n        }\r\n    }\r\n    Object.assign(target || {}, source);\r\n    return target;\r\n}\r\n\r\nconst configFilePath = configPath('config.yml');\r\nlet config: object = {};\r\n\r\nexport function reload() {\r\n    config = YAML.parse(fs.readFileSync(configFilePath + '.example').toString('utf8'));\r\n    if (fs.existsSync(configFilePath)) {\r\n        config = merge(config, YAML.parse(fs.readFileSync(configFilePath).toString('utf8')));\r\n    }\r\n}\r\n\r\nexport function get(path: string = '$', def: any = undefined): any {\r\n    let res = jp.query(config, path);\r\n    if (res instanceof Array) {\r\n        switch (res.length) {\r\n            case 0:\r\n                return def;\r\n            case 1:\r\n                return res[0] === undefined ? def : res[0];\r\n            default:\r\n                return res;\r\n        }\r\n    }\r\n    return res === undefined ? def : res;\r\n}\r\n\r\nexport function format(template: string, data: object) {\r\n    return template.replace(/\\${([a-z]+)}/gi, (_, v) => data[v] ?? '');\r\n}\r\n\r\nreload();\r\n"]}
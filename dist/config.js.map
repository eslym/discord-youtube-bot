{"version":3,"sources":["../src/config.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,mCAAqC;AACrC,yBAAyB;AACzB,+BAA+B;AAE/B,SAAS,KAAK,CAAC,MAAW,EAAE,MAAW;IACnC,KAAI,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC;QAC/B,IAAG,MAAM,CAAC,GAAG,CAAC,YAAY,MAAM,EAAC;YAC7B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAC/D;KACJ;IACD,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;IACpC,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,MAAM,cAAc,GAAG,kBAAU,CAAC,YAAY,CAAC,CAAC;AAChD,IAAI,MAAM,GAAW,EAAE,CAAC;AAExB,SAAgB,MAAM;IAClB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACnF,IAAG,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,EAAC;QAC7B,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KACxF;AACL,CAAC;AALD,wBAKC;AAED,SAAgB,GAAG,CAAC,OAAe,GAAG,EAAE,MAAW,SAAS;IACxD,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACjC,IAAG,GAAG,YAAY,KAAK,EAAC;QACpB,QAAO,GAAG,CAAC,MAAM,EAAC;YACd,KAAK,CAAC;gBACF,OAAO,SAAS,CAAC;YACrB,KAAK,CAAC;gBACF,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;YAClB;gBACI,OAAO,GAAG,CAAC;SAClB;KACJ;IACD,OAAO,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;AACzC,CAAC;AAbD,kBAaC","file":"config.js","sourcesContent":["import * as YAML from 'yaml';\nimport { configPath } from './paths';\nimport * as fs from 'fs';\nimport * as jp from 'jsonpath';\n\nfunction merge(target: any, source: any){\n    for(let key of Object.keys(source)){\n        if(source[key] instanceof Object){\n            Object.assign(source[key], merge(target[key], source[key]));\n        }\n    }\n    Object.assign(target || {}, source);\n    return target;\n}\n\nconst configFilePath = configPath('config.yml');\nlet config: object = {};\n\nexport function reload(){\n    config = YAML.parse(fs.readFileSync(configFilePath + '.example').toString('utf8'));\n    if(fs.existsSync(configFilePath)){\n        config = merge(config, YAML.parse(fs.readFileSync(configFilePath).toString('utf8')));\n    }\n}\n\nexport function get(path: string = '$', def: any = undefined): any{\n    let res = jp.query(config, path);\n    if(res instanceof Array){\n        switch(res.length){\n            case 0:\n                return undefined;\n            case 1:\n                return res[0];\n            default:\n                return res;\n        }\n    }\n    return res === undefined ? def : res;\n}\n"]}
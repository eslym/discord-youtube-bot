{"version":3,"sources":["../src/commands/SubscribeCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kDAAkE;AAElE,6CAAwC;AACxC,yDAAoD;AACpD,0CAAqC;AAExB,QAAA,gBAAgB,GAAG;IAC5B,UAAU,EAAE,IAAI,wCAA6B,EAAE;SAC1C,OAAO,CAAC,WAAW,CAAC;SACpB,cAAc,CAAC,oDAAoD,CAAC;SACpE,eAAe,CACZ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC;SAC3B,cAAc,CAAC,oCAAoC,CAAC;SACpD,WAAW,CAAC,IAAI,CAAC,CACzB;SACA,oBAAoB,CACjB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC;SACxB,cAAc,CAAC,qCAAqC,CAAC;SACrD,WAAW,CAAC,KAAK,CAAC,CAC1B;IAEC,MAAM,CAAC,WAA+B;;YACxC,IAAI,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAC7D,IAAI,OAAO,GAAgB,WAAW,CAAC,OAAsB,CAAC;YAC9D,IAAI,MAAM,GAAG,MAAM,eAAM,CAAC,OAAO,CAAC;gBAC9B,KAAK,EAAE;oBACH,eAAe,EAAE,UAAU;iBAC9B;aACJ,CAAC,CAAC;YACH,IAAI,KAAK,CAAC;YACV,IAAG,CAAC,MAAM,EAAC;gBACP,MAAM,GAAG,IAAI,eAAM,CAAC;oBAChB,eAAe,EAAE,UAAU;iBAC9B,CAAC,CAAC;gBACH,IAAI,OAAO,GAAG,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;gBAC1C,IAAG,OAAO,KAAK,IAAI,EAAC;oBAChB,MAAM,WAAW,CAAC,KAAK,CAAC;wBACpB,MAAM,EAAE,CAAC,aAAK,CAAC,KAAK,CAAC,0CAA0C,UAAU,KAAK,CAAC,CAAC;qBACnF,CAAC,CAAC;oBACH,OAAO;iBACV;gBACD,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBACpB,MAAM,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,CAAC;gBAC1B,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;aACjC;iBAAM;gBACH,IAAI,OAAO,GAAG,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;gBAC1C,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;aACjC;YACD,IAAI,GAAG,GAAG,MAAM,2BAAY,CAAC,KAAK,CAAC;gBAC/B,KAAK,EAAE;oBACH,MAAM,EAAE,MAAM,CAAC,EAAE;oBACjB,kBAAkB,EAAE,OAAO,CAAC,EAAE;iBACjC;aACJ,CAAC,CAAC;YACH,IAAG,GAAG,GAAG,CAAC,EAAC;gBACP,MAAM,WAAW,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,aAAK,CAAC,IAAI,CAAC,GAAG,OAAO,kCAAkC,CAAC,CAAC,EAAC,CAAC,CAAC;gBAC9F,OAAM;aACT;YACD,IAAI,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAC5D,MAAM,2BAAY,CAAC,MAAM,CAAC;gBACtB,MAAM,EAAE,MAAM,CAAC,EAAE;gBACjB,kBAAkB,EAAE,OAAO,CAAC,EAAE;gBAC9B,OAAO,EAAE,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE;aACxD,CAAC,CAAC;YACH,MAAM,WAAW,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,aAAK,CAAC,IAAI,CAAC,cAAc,KAAK,QAAQ,OAAO,GAAG,CAAC,CAAC,EAAC,CAAC,CAAA;QAC1F,CAAC;KAAA;CACJ,CAAA","file":"SubscribeCommand.js","sourcesContent":["import {SlashCommandSubcommandBuilder} from \"@discordjs/builders\";\nimport {CommandInteraction, TextChannel} from \"discord.js\";\nimport {WebSub} from \"../models/WebSub\";\nimport {Subscription} from \"../models/Subscription\";\nimport {embed} from \"../utils/embed\";\n\nexport const SubscribeCommand = {\n    definition: new SlashCommandSubcommandBuilder()\n        .setName('subscribe')\n        .setDescription('Subscribe a youtube channel for this text channel.')\n        .addStringOption(\n            opt => opt.setName('channel_id')\n                .setDescription('Youtube channel id to unsubscribe.')\n                .setRequired(true)\n        )\n        .addMentionableOption(\n            opt => opt.setName('mention')\n                .setDescription('Mention when received notification.')\n                .setRequired(false)\n        ),\n\n    async handle(interaction: CommandInteraction){\n        let channel_id = interaction.options.getString('channel_id');\n        let channel: TextChannel = interaction.channel as TextChannel;\n        let websub = await WebSub.findOne({\n            where: {\n                youtube_channel: channel_id,\n            }\n        });\n        let title;\n        if(!websub){\n            websub = new WebSub({\n                youtube_channel: channel_id,\n            });\n            let snippet = await websub.fetchSnippet();\n            if(snippet === null){\n                await interaction.reply({\n                    embeds: [embed.error(`Cannot find youtube channel with ID: \\`${channel_id}\\`.`)]\n                });\n                return;\n            }\n            await websub.save();\n            websub.subscribe().then();\n            title = snippet.snippet.title;\n        } else {\n            let snippet = await websub.fetchSnippet();\n            title = snippet.snippet.title;\n        }\n        let sub = await Subscription.count({\n            where: {\n                sub_id: websub.id,\n                discord_channel_id: channel.id,\n            }\n        });\n        if(sub > 0){\n            await interaction.reply({embeds: [embed.warn(`${channel} already have this subscription!`)]});\n            return\n        }\n        let mention = interaction.options.getMentionable('mention');\n        await Subscription.create({\n            sub_id: websub.id,\n            discord_channel_id: channel.id,\n            mention: mention === null ? null : mention.toString()\n        });\n        await interaction.reply({embeds: [embed.info(`Subscribed ${title} for ${channel}.`)]})\n    }\n}\n"]}
{"version":3,"sources":["../src/commands/UnsubscribeCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kDAAkE;AAElE,6CAAwC;AACxC,0CAAqC;AACrC,yDAAoD;AACpD,yDAAoD;AAEvC,QAAA,kBAAkB,GAAG;IAC9B,UAAU,EAAE,IAAI,wCAA6B,EAAE;SAC1C,OAAO,CAAC,aAAa,CAAC;SACtB,cAAc,CAAC,uDAAuD,CAAC;SACvE,eAAe,CACZ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC;SAC3B,cAAc,CAAC,oCAAoC,CAAC;SACpD,WAAW,CAAC,IAAI,CAAC,CACzB;IAEC,MAAM,CAAC,WAA+B;;YACxC,IAAI,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAC7D,IAAI,OAAO,GAAgB,WAAW,CAAC,OAAsB,CAAC;YAC9D,IAAI,MAAM,GAAG,MAAM,eAAM,CAAC,OAAO,CAAC;gBAC9B,KAAK,EAAE;oBACH,eAAe,EAAE,UAAU;iBAC9B;aACJ,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,GAAG,IAAI,eAAM,CAAC;oBAChB,eAAe,EAAE,UAAU;iBAC9B,CAAC,CAAC;gBACH,IAAI,OAAO,GAAG,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;gBAC1C,IAAI,OAAO,KAAK,IAAI,EAAE;oBAClB,MAAM,WAAW,CAAC,KAAK,CAAC;wBACpB,MAAM,EAAE,CAAC,aAAK,CAAC,KAAK,CAAC,0CAA0C,UAAU,KAAK,CAAC,CAAC;qBACnF,CAAC,CAAC;oBACH,OAAO;iBACV;gBACD,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;gBAClC,MAAM,WAAW,CAAC,KAAK,CAAC;oBACpB,MAAM,EAAE,CAAC,aAAK,CAAC,KAAK,CAAC,GAAG,OAAO,uBAAuB,KAAK,GAAG,CAAC,CAAC;iBACnE,CAAC,CAAC;gBACH,OAAO;aACV;YACD,IAAI,OAAO,GAAG,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;YAC1C,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;YAClC,IAAI,GAAG,GAAG,MAAM,2BAAY,CAAC,OAAO,CAAC;gBACjC,KAAK,EAAE;oBACH,MAAM,EAAE,MAAM,CAAC,EAAE;oBACjB,kBAAkB,EAAE,OAAO,CAAC,EAAE;iBACjC;aACJ,CAAC,CAAC;YACH,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,WAAW,CAAC,KAAK,CAAC;oBACpB,MAAM,EAAE,CAAC,aAAK,CAAC,KAAK,CAAC,GAAG,OAAO,uBAAuB,KAAK,GAAG,CAAC,CAAC;iBACnE,CAAC,CAAC;gBACH,OAAM;aACT;YACD,MAAM,2BAAY,CAAC,OAAO,CAAC;gBACvB,KAAK,EAAE;oBACH,eAAe,EAAE,GAAG,CAAC,EAAE;iBAC1B;aACJ,CAAC,CAAC;YACH,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC;YACpB,IAAI,KAAK,GAAG,MAAM,2BAAY,CAAC,KAAK,CAAC;gBACjC,KAAK,EAAE;oBACH,MAAM,EAAE,MAAM,CAAC,EAAE;iBACpB;aACJ,CAAC,CAAC;YACH,IAAG,KAAK,KAAK,CAAC,EAAC;gBACX,MAAM,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;aACzC;YACD,MAAM,WAAW,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,aAAK,CAAC,IAAI,CAAC,gBAAgB,KAAK,QAAQ,OAAO,GAAG,CAAC,CAAC,EAAC,CAAC,CAAA;QAC5F,CAAC;KAAA;CACJ,CAAA","file":"UnsubscribeCommand.js","sourcesContent":["import {SlashCommandSubcommandBuilder} from \"@discordjs/builders\";\nimport {CommandInteraction, TextChannel} from \"discord.js\";\nimport {WebSub} from \"../models/WebSub\";\nimport {embed} from \"../utils/embed\";\nimport {Subscription} from \"../models/Subscription\";\nimport {Notification} from \"../models/Notification\";\n\nexport const UnsubscribeCommand = {\n    definition: new SlashCommandSubcommandBuilder()\n        .setName('unsubscribe')\n        .setDescription('Unsubscribe a youtube channel from this text channel.')\n        .addStringOption(\n            opt => opt.setName('channel_id')\n                .setDescription('Youtube channel id to unsubscribe.')\n                .setRequired(true)\n        ),\n\n    async handle(interaction: CommandInteraction) {\n        let channel_id = interaction.options.getString('channel_id');\n        let channel: TextChannel = interaction.channel as TextChannel;\n        let websub = await WebSub.findOne({\n            where: {\n                youtube_channel: channel_id,\n            }\n        });\n        if (!websub) {\n            websub = new WebSub({\n                youtube_channel: channel_id,\n            });\n            let snippet = await websub.fetchSnippet();\n            if (snippet === null) {\n                await interaction.reply({\n                    embeds: [embed.error(`Cannot find youtube channel with ID: \\`${channel_id}\\`.`)]\n                });\n                return;\n            }\n            let title = snippet.snippet.title;\n            await interaction.reply({\n                embeds: [embed.error(`${channel} does not subscribe ${title}!`)]\n            });\n            return;\n        }\n        let snippet = await websub.fetchSnippet();\n        let title = snippet.snippet.title;\n        let sub = await Subscription.findOne({\n            where: {\n                sub_id: websub.id,\n                discord_channel_id: channel.id,\n            }\n        });\n        if (!sub) {\n            await interaction.reply({\n                embeds: [embed.error(`${channel} does not subscribe ${title}!`)]\n            });\n            return\n        }\n        await Notification.destroy({\n            where: {\n                subscription_id: sub.id,\n            }\n        });\n        await sub.destroy();\n        let count = await Subscription.count({\n            where: {\n                sub_id: websub.id,\n            }\n        });\n        if(count === 0){\n            await websub.subscribe('unsubscribe');\n        }\n        await interaction.reply({embeds: [embed.info(`Unsubscribed ${title} for ${channel}.`)]})\n    }\n}\n"]}
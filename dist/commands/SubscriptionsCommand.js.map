{"version":3,"sources":["../src/commands/SubscriptionsCommand.ts"],"names":[],"mappings":"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","file":"SubscriptionsCommand.js","sourcesContent":["import {SlashCommandSubcommandBuilder} from \"@discordjs/builders\";\nimport {\n    CommandInteraction,\n    MessageActionRow,\n    MessageEmbed,\n    MessageSelectMenu,\n    MessageSelectOptionData,\n} from \"discord.js\";\nimport {WebSub} from \"../models/WebSub\";\nimport {Subscription} from \"../models/Subscription\";\nimport {embed} from \"../utils/embed\";\nimport {google, youtube_v3} from \"googleapis\";\nimport {MessageComponentTypes} from \"discord.js/typings/enums\";\nimport Dict = NodeJS.Dict;\nimport Schema$ChannelSnippet = youtube_v3.Schema$ChannelSnippet;\n\nexport const SubscriptionsCommand = {\n    definition: new SlashCommandSubcommandBuilder()\n        .setName('ls')\n        .setDescription('List the subscriptions for current channel.'),\n\n    async handle(interaction: CommandInteraction) {\n        await interaction.reply({\n            embeds: [embed.log(`Querying subscriptions for ${interaction.channel}.`)]\n        });\n        let subs = await WebSub.findAll({\n            include: [Subscription],\n            where: {\n                '$subscriptions.discord_channel_id$': interaction.channelId\n            }\n        });\n        if(subs.length === 0){\n            await interaction.editReply({\n                embeds: [embed.warn(`No subscriptions for ${interaction.channel}.`)]\n            });\n            return;\n        }\n        let res = await google.youtube('v3').channels.list({\n            part: ['id', 'snippet'],\n            id: subs.map(s => s.youtube_channel),\n            maxResults: subs.length,\n        });\n        let channels: Dict<Schema$ChannelSnippet> = {};\n        let options: MessageSelectOptionData[] = [];\n        for(let channel of res.data.items){\n            options.push({\n                label: channel.snippet.title,\n                description: channel.snippet.description.length > 100 ?\n                    channel.snippet.description.slice(0, 97) + '...' :\n                    channel.snippet.description,\n                value: channel.id\n            });\n            channels[channel.id] = channel.snippet;\n        }\n        let menu = new MessageSelectMenu();\n        menu.setCustomId('youtube_subscriptions');\n        menu.setPlaceholder('Select a channel to view details');\n        menu.setOptions(options);\n        let msg = await interaction.editReply({\n            embeds: [embed.info(`Subscriptions for \"${interaction.channel}\":`)],\n            components: [new MessageActionRow().setComponents(menu)]\n        });\n        let message = await interaction.channel.messages.fetch(msg.id);\n        let collector = message.createMessageComponentCollector({\n            componentType: MessageComponentTypes.SELECT_MENU, time: 60000\n        });\n        collector.on('collect', async (imenu)=>{\n            let embed = new MessageEmbed();\n            let channel = channels[imenu.values[0]];\n            embed.setColor('GREEN');\n            embed.setTitle(channel.title);\n            embed.setURL(`https://youtube.com/channel/${imenu.values[0]}`);\n            embed.setThumbnail(channel.thumbnails.default.url);\n            embed.setDescription(channel.description);\n            embed.addField('Channel ID', imenu.values[0]);\n            await imenu.reply({embeds: [embed]});\n        });\n        collector.on('end', ()=>{\n            menu.setPlaceholder(\"Expired.\");\n            menu.setDisabled(true);\n            message.edit({\n                embeds: [embed.info(`Subscriptions for \"${interaction.channel}\":`)],\n                components: [new MessageActionRow().setComponents(menu)]\n            });\n        });\n    }\n}"]}
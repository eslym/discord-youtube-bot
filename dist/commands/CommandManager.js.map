{"version":3,"sources":["../src/commands/CommandManager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kDAI6B;AAQ7B,MAAM,QAAQ,GAAuB,EAAE,CAAC;AAExC,IAAc,cAAc,CAe3B;AAfD,WAAc,cAAc;IACxB,SAAgB,UAAU,CAAC,OAAqB;QAC5C,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QAC5C,OAAO,cAAc,CAAC;IAC1B,CAAC;IAHe,yBAAU,aAGzB,CAAA;IAED,SAAgB,cAAc;QAC1B,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;IACvE,CAAC;IAFe,6BAAc,iBAE7B,CAAA;IAED,SAAsB,MAAM,CAAC,WAA+B;;YACxD,IAAI,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;gBAClD,OAAO,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aAChE;QACL,CAAC;KAAA;IAJqB,qBAAM,SAI3B,CAAA;AACL,CAAC,EAfa,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAe3B;AAED,MAAa,oBAAoB;IAAjC;QACc,cAAS,GAAuC,EAAE,CAAC;IA+BjE,CAAC;IA7BG,UAAU,CAAC,OAAqC;QAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QAClD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,WAAW,CAAC,MAAyE;QACjF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACxC,IAAI,GAAG,CAAC,UAAU,YAAY,6CAAkC,EAAE;gBAC9D,IAAI,MAAM,CAAC,UAAU,YAAY,8BAAmB,EAAE;oBAClD,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;iBACxD;qBAAM;oBACH,MAAM,IAAI,SAAS,CAAC,iDAAiD,CAAC,CAAC;iBAC1E;aACJ;iBAAM;gBACH,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,UAA2C,CAAC,CAAC;aACpF;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEK,MAAM,CAAC,WAA+B;;YACxC,IAAI,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC1D,IAAI,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBAC/C,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aACpD;YACD,IAAI,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACzD,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;gBAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aACzD;QACL,CAAC;KAAA;CACJ;AAhCD,oDAgCC","file":"CommandManager.js","sourcesContent":["import {\n    SlashCommandBuilder,\n    SlashCommandSubcommandBuilder,\n    SlashCommandSubcommandGroupBuilder\n} from \"@discordjs/builders\";\nimport {CommandInteraction} from \"discord.js\";\nimport Dict = NodeJS.Dict;\n\nexport type SlashCommand = Command<SlashCommandBuilder>;\nexport type SubCommand = Command<SlashCommandSubcommandBuilder>;\nexport type SubCommandGroup = Command<SlashCommandSubcommandGroupBuilder>;\n\nconst commands: Dict<SlashCommand> = {};\n\nexport module CommandManager {\n    export function addCommand(command: SlashCommand) {\n        commands[command.definition.name] = command;\n        return CommandManager;\n    }\n\n    export function getDefinitions() {\n        return Object.values(commands).map(def => def.definition.toJSON());\n    }\n\n    export async function handle(interaction: CommandInteraction) {\n        if (commands.hasOwnProperty(interaction.commandName)) {\n            return commands[interaction.commandName].handle(interaction);\n        }\n    }\n}\n\nexport class SubCommandController {\n    protected _commands: Dict<SubCommand | SubCommandGroup> = {};\n\n    addCommand(command: SubCommand | SubCommandGroup) {\n        this._commands[command.definition.name] = command;\n        return this;\n    }\n\n    addToParent(parent: Command<SlashCommandBuilder | SlashCommandSubcommandGroupBuilder>) {\n        Object.values(this._commands).forEach(def => {\n            if (def.definition instanceof SlashCommandSubcommandGroupBuilder) {\n                if (parent.definition instanceof SlashCommandBuilder) {\n                    parent.definition.addSubcommandGroup(def.definition);\n                } else {\n                    throw new TypeError('Sub command group can only add to command root.');\n                }\n            } else {\n                parent.definition.addSubcommand(def.definition as SlashCommandSubcommandBuilder);\n            }\n        });\n    }\n\n    async handle(interaction: CommandInteraction) {\n        let group = interaction.options.getSubcommandGroup(false);\n        if (group && this._commands.hasOwnProperty(group)) {\n            return this._commands[group].handle(interaction);\n        }\n        let subcommand = interaction.options.getSubcommand(true);\n        if (this._commands.hasOwnProperty(subcommand)) {\n            return this._commands[subcommand].handle(interaction);\n        }\n    }\n}\n\nexport interface Command<T extends SlashCommandBuilder | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder> {\n    definition: T\n\n    handle(interaction: CommandInteraction): Promise<void>\n}\n"]}
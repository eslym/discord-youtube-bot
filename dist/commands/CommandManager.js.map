{"version":3,"sources":["../src/commands/CommandManager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAYA,MAAM,QAAQ,GAAuB,EAAE,CAAC;AAExC,IAAc,cAAc,CAe3B;AAfD,WAAc,cAAc;IACxB,SAAgB,UAAU,CAAC,OAAqB;QAC5C,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QAC5C,OAAO,cAAc,CAAC;IAC1B,CAAC;IAHe,yBAAU,aAGzB,CAAA;IAED,SAAgB,cAAc;QAC1B,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAA,EAAE,CAAA,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;IACrE,CAAC;IAFe,6BAAc,iBAE7B,CAAA;IAED,SAAsB,MAAM,CAAC,WAA+B;;YACxD,IAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,EAAC;gBAChD,OAAO,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aAChE;QACL,CAAC;KAAA;IAJqB,qBAAM,SAI3B,CAAA;AACL,CAAC,EAfa,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAe3B;AAED,MAAa,oBAAoB;IAAjC;QACc,cAAS,GAAqB,EAAE,CAAC;IAgB/C,CAAC;IAfG,UAAU,CAAC,OAAmB;QAC1B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QAClD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,WAAW,CAAC,MAAyE;QACjF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAA,EAAE,CAAA,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IAChG,CAAC;IAEK,MAAM,CAAC,WAA+B;;YACxC,IAAI,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACzD,IAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,EAAC;gBACzC,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aACzD;QACL,CAAC;KAAA;CACJ;AAjBD,oDAiBC;AAED,MAAa,yBAAyB;IAAtC;QACc,YAAO,GAA0B,EAAE,CAAC;IAgBlD,CAAC;IAfG,QAAQ,CAAC,KAAsB;QAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAC5C,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,WAAW,CAAC,MAAoC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAA,EAAE,CAAA,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACnG,CAAC;IAEK,MAAM,CAAC,WAA+B;;YACxC,IAAI,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACpD,IAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,EAAC;gBAClC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aAClD;QACL,CAAC;KAAA;CACJ;AAjBD,8DAiBC","file":"CommandManager.js","sourcesContent":["import {\n    SlashCommandBuilder,\n    SlashCommandSubcommandBuilder,\n    SlashCommandSubcommandGroupBuilder\n} from \"@discordjs/builders\";\nimport {CommandInteraction} from \"discord.js\";\nimport Dict = NodeJS.Dict;\n\nexport type SlashCommand = Command<SlashCommandBuilder>;\nexport type SubCommand = Command<SlashCommandSubcommandBuilder>;\nexport type SubCommandGroup = Command<SlashCommandSubcommandGroupBuilder>;\n\nconst commands: Dict<SlashCommand> = {};\n\nexport module CommandManager {\n    export function addCommand(command: SlashCommand){\n        commands[command.definition.name] = command;\n        return CommandManager;\n    }\n\n    export function getDefinitions(){\n        return Object.values(commands).map(def=>def.definition.toJSON());\n    }\n\n    export async function handle(interaction: CommandInteraction){\n        if(commands.hasOwnProperty(interaction.commandName)){\n            return commands[interaction.commandName].handle(interaction);\n        }\n    }\n}\n\nexport class SubCommandController {\n    protected _commands: Dict<SubCommand> = {};\n    addCommand(command: SubCommand){\n        this._commands[command.definition.name] = command;\n        return this;\n    }\n\n    addToParent(parent: Command<SlashCommandBuilder | SlashCommandSubcommandGroupBuilder>){\n        Object.values(this._commands).forEach(def=>parent.definition.addSubcommand(def.definition));\n    }\n\n    async handle(interaction: CommandInteraction){\n        let subcommand = interaction.options.getSubcommand(true);\n        if(this._commands.hasOwnProperty(subcommand)){\n            return this._commands[subcommand].handle(interaction);\n        }\n    }\n}\n\nexport class SubCommandGroupController {\n    protected _groups: Dict<SubCommandGroup> = {};\n    addGroup(group: SubCommandGroup){\n        this._groups[group.definition.name] = group;\n        return this;\n    }\n\n    addToParent(parent: Command<SlashCommandBuilder>){\n        Object.values(this._groups).forEach(def=>parent.definition.addSubcommandGroup(def.definition));\n    }\n\n    async handle(interaction: CommandInteraction){\n        let group = interaction.options.getSubcommand(true);\n        if(this._groups.hasOwnProperty(group)){\n            return this._groups[group].handle(interaction);\n        }\n    }\n}\n\nexport interface Command<T extends SlashCommandBuilder | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder> {\n    definition: T\n    handle(interaction: CommandInteraction): Promise<void>\n}\n"]}